{"version":3,"sources":["../../src/hooks/useRefCallback.js","../../src/lib/CropPoint.js","../../src/lib/Canvas.js","../../src/lib/CropPoints.js","../../src/lib/CropPointsDelimiters.js","../../src/lib/imgManipulation.js","../../src/lib/utils.js","../../src/components/Cropper.js","components/Header.js","App.js","index.js"],"names":["useRefCallback","useState","ref","setRef","useCallback","cropPointStyle","width","height","backgroundColor","borderRadius","position","zIndex","CropPoint","cropPoints","pointArea","defaultPosition","externalOnStop","onStop","externalOnDrag","onDrag","bounds","style","CropPoints","props","previewDims","otherProps","x","y","CropPointsDelimiters","canvas","setCanvasRef","clearCanvas","ctx","sortPoints","drawShape","sortedPoints","index","point","nextPoint","useEffect","Object","buildImgContainerStyle","imageDimensions","Canvas","image","onDragStop","onChange","cropperRef","useOpenCv","cvLoaded","cv","canvasRef","useRef","previewCanvas","setPreviewCanvasRef","setPreviewDims","setCropPoints","setLoading","mode","setMode","useImperativeHandle","backToCrop","done","opts","Promise","dst","bR","bL","tR","tL","sourceCoordinates","map","maxWidth","Math","maxHeight","destCoordinates","Ms","Md","transformMatrix","dsize","setPreviewPaneDimensions","transform","options","blur","th","thMode","thMeanCorrection","thBlockSize","thMax","grayScale","ksize","applyFilter","resolve","showPreview","newPreviewDims","ratio","window","calculated","calcDims","imageResizeRatio","src","file","reader","reject","img","document","createCanvas","contours","hierarchy","rect","contourCoordinates","detectContours","bootstrap","pointerEvents","Cropper","openCvPath","Header","className","ghost","title","size","column","Item","label","href","alt","aria-label","role","margin","Dragger","Upload","App","cropState","setCropState","setImg","setInputKey","s","doSomething","a","console","log","current","preview","res","draggerProps","name","multiple","e","fileList","length","originFileObj","onClick","icon","CheckOutlined","undefined","i","PlusOutlined","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3988d60e.chunk.js","sourcesContent":["import { useCallback, useState } from 'react'\n\nfunction useRefCallback() {\n  const [ref, setRef] = useState()\n  const refCallback = useCallback((node) => {\n    setRef(node)\n  }, [])\n\n  return [ref, refCallback]\n}\n\nexport default useRefCallback\n","import React, { useCallback } from 'react'\nimport Draggable from 'react-draggable'\n\nconst cropPointStyle = {\n  width: 15,\n  height: 15,\n  backgroundColor: '#3cabe2',\n  borderRadius: '100%',\n  position: 'absolute',\n  zIndex: 1001\n}\n\nconst CropPoint = ({\n  cropPoints,\n  pointArea,\n  defaultPosition,\n  onStop: externalOnStop,\n  onDrag: externalOnDrag\n}) => {\n  const onDrag = useCallback(\n    (_, position) => {\n      externalOnDrag(position, pointArea)\n    },\n    [externalOnDrag]\n  )\n\n  const onStop = useCallback(\n    (_, position) => {\n      externalOnStop(position, pointArea, cropPoints)\n    },\n    [externalOnDrag, cropPoints]\n  )\n\n  return (\n    <Draggable\n      bounds='parent'\n      defaultPosition={defaultPosition}\n      position={cropPoints[pointArea]}\n      onDrag={onDrag}\n      onStop={onStop}\n    >\n      <div style={cropPointStyle} />\n    </Draggable>\n  )\n}\n\nexport default CropPoint\n","import React, {\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState\n} from 'react'\nimport { useOpenCv } from 'opencv-react'\n\nimport { calcDims, readFile } from '../lib/utils'\nimport useRefCallback from '../hooks/useRefCallback'\nimport CropPoints from '../lib/CropPoints'\nimport { applyFilter, transform } from '../lib/imgManipulation'\nimport CropPointsDelimiters from './CropPointsDelimiters'\n\nconst buildImgContainerStyle = (previewDims) => ({\n  width: previewDims.width,\n  height: previewDims.height\n})\n\nconst imageDimensions = { width: 0, height: 0 }\nlet imageResizeRatio\n\nconst Canvas = ({ image, onDragStop, onChange, cropperRef }) => {\n  const { loaded: cvLoaded, cv } = useOpenCv()\n  const canvasRef = useRef()\n  const [previewCanvas, setPreviewCanvasRef] = useRefCallback()\n  const [previewDims, setPreviewDims] = useState()\n  const [cropPoints, setCropPoints] = useState({})\n  const [loading, setLoading] = useState(false)\n  const [mode, setMode] = useState('crop')\n\n  useImperativeHandle(cropperRef, () => ({\n    backToCrop: () => {\n      setMode('crop')\n    },\n    done: async (opts = {}) => {\n      return new Promise((resolve) => {\n        setLoading(true)\n        transform(\n          cv,\n          canvasRef.current,\n          cropPoints,\n          imageResizeRatio,\n          setPreviewPaneDimensions\n        )\n        applyFilter(cv, canvasRef.current)\n        if (opts.preview) {\n          setMode('preview')\n        }\n        canvasRef.current.toBlob((blob) => {\n          resolve(blob)\n          setLoading(false)\n        }, image.type)\n      })\n    }\n  }))\n\n  useEffect(() => {\n    if (mode === 'preview') {\n      showPreview()\n    }\n  }, [mode])\n\n  const setPreviewPaneDimensions = () => {\n    // set preview pane dimensions\n    const newPreviewDims = calcDims(\n      canvasRef.current.width,\n      canvasRef.current.height\n    )\n    setPreviewDims(newPreviewDims)\n\n    previewCanvas.width = newPreviewDims.width\n    previewCanvas.height = newPreviewDims.height\n\n    imageResizeRatio = newPreviewDims.width / canvasRef.current.width\n  }\n\n  const createCanvas = (src) => {\n    return new Promise((resolve, reject) => {\n      const img = document.createElement('img')\n      img.onload = async () => {\n        // set edited image canvas and dimensions\n        canvasRef.current = document.createElement('canvas')\n        canvasRef.current.width = img.width\n        canvasRef.current.height = img.height\n        const ctx = canvasRef.current.getContext('2d')\n        ctx.drawImage(img, 0, 0)\n        imageDimensions.width = canvasRef.current.width\n        imageDimensions.height = canvasRef.current.height\n        setPreviewPaneDimensions()\n        resolve()\n      }\n      img.src = src\n    })\n  }\n\n  const showPreview = (image) => {\n    const src = image || cv.imread(canvasRef.current)\n    const dst = new cv.Mat()\n    const dsize = new cv.Size(0, 0)\n    cv.resize(\n      src,\n      dst,\n      dsize,\n      imageResizeRatio,\n      imageResizeRatio,\n      cv.INTER_AREA\n    )\n    cv.imshow(previewCanvas, dst)\n    src.delete()\n    dst.delete()\n  }\n\n  const detectContours = () => {\n    const dst = cv.imread(canvasRef.current)\n    const ksize = new cv.Size(5, 5)\n    // convert the image to grayscale, blur it, and find edges in the image\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0)\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT)\n    cv.Canny(dst, dst, 75, 200)\n    // find contours\n    cv.threshold(dst, dst, 120, 200, cv.THRESH_BINARY)\n    const contours = new cv.MatVector()\n    const hierarchy = new cv.Mat()\n    cv.findContours(\n      dst,\n      contours,\n      hierarchy,\n      cv.RETR_CCOMP,\n      cv.CHAIN_APPROX_SIMPLE\n    )\n    const rect = cv.boundingRect(dst)\n    dst.delete()\n    hierarchy.delete()\n    contours.delete()\n    // transform the rectangle into a set of points\n    Object.keys(rect).forEach((key) => {\n      rect[key] = rect[key] * imageResizeRatio\n    })\n\n    const contourCoordinates = {\n      'left-top': { x: rect.x, y: rect.y },\n      'right-top': { x: rect.x + rect.width, y: rect.y },\n      'right-bottom': {\n        x: rect.x + rect.width,\n        y: rect.y + rect.height\n      },\n      'left-bottom': { x: rect.x, y: rect.y + rect.height }\n    }\n\n    setCropPoints(contourCoordinates)\n  }\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(cropPoints)\n    }\n  }, [cropPoints])\n\n  useEffect(() => {\n    const bootstrap = async () => {\n      const src = await readFile(image)\n      await createCanvas(src)\n      showPreview()\n      detectContours()\n    }\n\n    if (image && previewCanvas && cvLoaded && mode === 'crop') {\n      bootstrap()\n    }\n  }, [image, previewCanvas, cvLoaded, mode])\n\n  const onDrag = useCallback((position, area) => {\n    const { x, y } = position\n    setCropPoints((cPs) => ({ ...cPs, [area]: { x, y } }))\n  }, [])\n\n  const onStop = useCallback((position, area, cropPoints) => {\n    const { x, y } = position\n    setCropPoints((cPs) => ({ ...cPs, [area]: { x, y } }))\n    if (onDragStop) {\n      onDragStop({ ...cropPoints, [area]: { x, y } })\n    }\n  }, [])\n\n  return (\n    <div\n      style={{\n        position: 'relative',\n        ...(previewDims && buildImgContainerStyle(previewDims))\n      }}\n    >\n      {previewDims && mode === 'crop' && (\n        <CropPoints\n          cropPoints={cropPoints}\n          previewDims={previewDims}\n          onDrag={onDrag}\n          onStop={onStop}\n        />\n      )}\n      {previewDims && (\n        <CropPointsDelimiters\n          previewDims={previewDims}\n          cropPoints={cropPoints}\n          imageResizeRatio={imageResizeRatio}\n        />\n      )}\n      <canvas\n        style={{ zIndex: 5, pointerEvents: 'none' }}\n        ref={setPreviewCanvasRef}\n      />\n    </div>\n  )\n}\n\nexport default Canvas\n","import React, { Fragment } from 'react'\nimport CropPoint from './CropPoint'\n\nconst CropPoints = (props) => {\n  const { previewDims, ...otherProps } = props\n  return (\n    <>\n      <CropPoint\n        pointArea='left-top'\n        defaultPosition={{ x: 0, y: 0 }}\n        {...otherProps}\n      />\n      <CropPoint\n        pointArea='right-top'\n        defaultPosition={{ x: previewDims.width, y: 0 }}\n        {...otherProps}\n      />\n      <CropPoint\n        pointArea='right-bottom'\n        defaultPosition={{ x: 0, y: previewDims.height }}\n        {...otherProps}\n      />\n      <CropPoint\n        pointArea='left-bottom'\n        defaultPosition={{\n          x: previewDims.width,\n          y: previewDims.height\n        }}\n        {...otherProps}\n      />\n    </>\n  )\n}\n\nexport default CropPoints\n","import React, { useCallback, useEffect } from 'react'\nimport useRefCallback from '../hooks/useRefCallback'\n\nconst CropPointsDelimiters = ({\n  cropPoints,\n  previewDims,\n  imageResizeRatio\n}) => {\n  const [canvas, setCanvasRef] = useRefCallback()\n\n  const clearCanvas = useCallback(() => {\n    const ctx = canvas.getContext('2d')\n    ctx.clearRect(0, 0, previewDims.width, previewDims.height)\n  }, [canvas, previewDims])\n\n  const sortPoints = useCallback(() => {\n    const sortOrder = ['left-top', 'right-top', 'right-bottom', 'left-bottom']\n    return sortOrder.reduce(\n      (acc, pointPos) => [...acc, cropPoints[pointPos]],\n      []\n    )\n  }, [cropPoints])\n\n  const drawShape = useCallback(\n    (sortedPoints) => {\n      const ctx = canvas.getContext('2d')\n      ctx.lineWidth = 3\n      ctx.strokeStyle = '#3cabe2'\n      ctx.beginPath()\n      sortedPoints.forEach((point, index) => {\n        if (index === 0) {\n          ctx.moveTo(point.x, point.y)\n        }\n        if (index !== sortedPoints.length - 1) {\n          const nextPoint = sortedPoints[index + 1]\n          ctx.lineTo(nextPoint.x, nextPoint.y)\n        } else {\n          ctx.closePath()\n        }\n      })\n      ctx.stroke()\n    },\n    [canvas]\n  )\n\n  useEffect(() => {\n    if (Object.keys(cropPoints).length && canvas) {\n      clearCanvas()\n      const sortedPoints = sortPoints()\n      drawShape(sortedPoints)\n    }\n  }, [cropPoints, canvas])\n\n  return (\n    <canvas\n      ref={setCanvasRef}\n      style={{\n        position: 'absolute',\n        zIndex: 5,\n        width: previewDims.width,\n        height: previewDims.height\n      }}\n      width={previewDims.width}\n      height={previewDims.height}\n    />\n  )\n}\n\nexport default CropPointsDelimiters\n","export const transform = (\n  cv,\n  docCanvas,\n  cropPoints,\n  imageResizeRatio,\n  setPreviewPaneDimensions\n) => {\n  const dst = cv.imread(docCanvas)\n\n  const bR = cropPoints['right-bottom']\n  const bL = cropPoints['left-bottom']\n  const tR = cropPoints['right-top']\n  const tL = cropPoints['left-top']\n\n  // create source coordinates matrix\n  const sourceCoordinates = [tL, tR, bR, bL].map((point) => [\n    point.x / imageResizeRatio,\n    point.y / imageResizeRatio\n  ])\n\n  // get max width\n  const maxWidth = Math.max(bR.x - bL.x, tR.x - tL.x) / imageResizeRatio\n  // get max height\n  const maxHeight = Math.max(bL.y - tL.y, bR.y - tR.y) / imageResizeRatio\n\n  // create dest coordinates matrix\n  const destCoordinates = [\n    [0, 0],\n    [maxWidth - 1, 0],\n    [maxWidth - 1, maxHeight - 1],\n    [0, maxHeight - 1]\n  ]\n\n  // convert to open cv matrix objects\n  const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...sourceCoordinates))\n  const Md = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...destCoordinates))\n  const transformMatrix = cv.getPerspectiveTransform(Ms, Md)\n  // set new image size\n  const dsize = new cv.Size(maxWidth, maxHeight)\n  // perform warp\n  cv.warpPerspective(\n    dst,\n    dst,\n    transformMatrix,\n    dsize,\n    cv.INTER_LINEAR,\n    cv.BORDER_CONSTANT,\n    new cv.Scalar()\n  )\n  cv.imshow(docCanvas, dst)\n\n  dst.delete()\n  Ms.delete()\n  Md.delete()\n  transformMatrix.delete()\n\n  setPreviewPaneDimensions()\n}\n\nexport const applyFilter = async (cv, docCanvas) => {\n  // default options\n  const options = {\n    blur: false,\n    th: true,\n    thMode: cv.ADAPTIVE_THRESH_MEAN_C,\n    thMeanCorrection: 15,\n    thBlockSize: 25,\n    thMax: 255,\n    grayScale: true\n  }\n  const dst = cv.imread(docCanvas)\n\n  if (options.grayScale) {\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0)\n  }\n  if (options.blur) {\n    const ksize = new cv.Size(5, 5)\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT)\n  }\n  if (options.th) {\n    if (options.grayScale) {\n      cv.adaptiveThreshold(\n        dst,\n        dst,\n        options.thMax,\n        options.thMode,\n        cv.THRESH_BINARY,\n        5,\n        8\n      )\n    } else {\n      dst.convertTo(dst, -1, 1, 60)\n      cv.threshold(dst, dst, 170, 255, cv.THRESH_BINARY)\n    }\n  }\n  cv.imshow(docCanvas, dst)\n}\n","export const readFile = (file) => {\n  if (file instanceof File) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader()\n      reader.onload = (event) => {\n        resolve(reader.result)\n      }\n      reader.onerror = (err) => {\n        reject(err)\n      }\n      reader.readAsDataURL(file)\n    })\n  }\n  if (typeof file === 'string') {\n    return Promise.resolve(file)\n  }\n}\n\nexport const calcDims = (width, height) => {\n  const ratio = width / height\n\n  // TODO parametrize this\n  const maxWidth = window.innerWidth - 40\n  const maxHeight = window.innerHeight - 240\n  const calculated = {\n    width: maxWidth,\n    height: Math.round(maxWidth / ratio),\n    ratio: ratio\n  }\n\n  if (calculated.height > maxHeight) {\n    calculated.height = maxHeight\n    calculated.width = Math.round(maxHeight * ratio)\n  }\n  return calculated\n}\n","import React from 'react'\nimport { OpenCvProvider } from 'opencv-react'\nimport Canvas from '../lib/Canvas'\n\nexport const Cropper = React.forwardRef((props, ref) => {\n  if (!props.image) {\n    return null\n  }\n\n  return (\n    <OpenCvProvider openCvPath='/opencv/opencv.js'>\n      <Canvas {...props} cropperRef={ref} />\n    </OpenCvProvider>\n  )\n})\n","import { Button, Descriptions, PageHeader } from 'antd'\nimport Paragraph from 'antd/lib/typography/Paragraph'\nimport React from 'react'\n\nconst Header = () => {\n  return (\n    <div className='site-page-header'>\n      <PageHeader ghost={false} title='react-perspective-cropper'>\n        <Descriptions size='small' column={2}>\n          <Descriptions.Item label='Package'>\n            <a href='https://www.npmjs.com/package/react-perspective-cropper'>\n              <img\n                alt='npm'\n                src='https://img.shields.io/npm/v/react-perspective-cropper.svg'\n              />\n            </a>\n            <a href='https://standardjs.com'>\n              <img\n                alt='standardjs'\n                src='https://img.shields.io/badge/code_style-standard-brightgreen.svg'\n              />\n            </a>\n          </Descriptions.Item>\n          <Descriptions.Item label='Description'>\n            <Paragraph>\n              React component performing border detection, perspective\n              correction and simple image filters over a provided image 📲 📸\n            </Paragraph>\n          </Descriptions.Item>\n          <Descriptions.Item label='Created by'>\n            Giacomo Cerquone from\n            <span\n              aria-label='italy flag'\n              role='img'\n              style={{ margin: '0 10px' }}\n            >\n              🇮🇹\n            </span>\n            with{' '}\n            <span aria-label='heart' role='img' style={{ margin: '0 10px' }}>\n              ❤️\n            </span>\n          </Descriptions.Item>\n        </Descriptions>\n      </PageHeader>\n    </div>\n  )\n}\n\nexport default Header\n","import React, { useCallback, useRef, useState } from 'react'\nimport { Button, Upload } from 'antd'\nimport { CheckOutlined, PlusOutlined } from '@ant-design/icons'\nimport { Cropper } from 'react-perspective-cropper'\n\nimport './App.css'\nimport Header from './components/Header'\n\nconst { Dragger } = Upload\n\nconst App = () => {\n  const [cropState, setCropState] = useState()\n  const [img, setImg] = useState()\n  const [inputKey, setInputKey] = useState(0)\n  const cropperRef = useRef()\n\n  const onDragStop = useCallback((s) => setCropState(s), [])\n  const onChange = useCallback((s) => setCropState(s), [])\n\n  const doSomething = async () => {\n    console.log(cropState)\n    try {\n      const res = await cropperRef.current.done({ preview: true })\n      console.log(res)\n    } catch (e) {\n      console.log('error', e)\n    }\n  }\n\n  const onImgSelection = async (e) => {\n    console.log(e)\n    if (e.fileList && e.fileList.length > 0) {\n      // it can also be a http or base64 string for example\n      setImg(e.fileList[0].originFileObj)\n    }\n  }\n\n  const draggerProps = {\n    name: 'file',\n    multiple: false,\n    onChange: onImgSelection\n  }\n\n  return (\n    <div className='root-container'>\n      <Header />\n      <div className='content-container'>\n        {cropperRef?.current && img && (\n          <div className='buttons-container'>\n            <Button onClick={doSomething} icon={<CheckOutlined />}>\n              Done\n            </Button>\n            <Button\n              onClick={() => {\n                cropperRef.current.backToCrop()\n              }}\n            >\n              Back\n            </Button>\n            <Button\n              onClick={() => {\n                setImg(undefined)\n                setInputKey((i) => i + 1)\n              }}\n            >\n              Reset\n            </Button>\n          </div>\n        )}\n        <Cropper\n          ref={cropperRef}\n          image={img}\n          onChange={onChange}\n          onDragStop={onDragStop}\n        />\n        {!img && (\n          <Dragger {...draggerProps}>\n            <p>\n              <PlusOutlined />\n            </p>\n            <p>Upload</p>\n          </Dragger>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}