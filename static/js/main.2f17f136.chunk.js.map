{"version":3,"sources":["../../src/lib/utils.js","../../src/lib/CropPoint.js","../../src/lib/CropPoints.js","../../src/lib/imgManipulation.js","../../src/lib/CropPointsDelimiters.js","../../src/lib/Canvas.js","../../src/components/Cropper.js","components/Header.js","App.js","index.js"],"names":["buildCropPointStyle","size","pointBgColor","pointBorder","width","height","backgroundColor","border","borderRadius","position","zIndex","CropPoint","cropPoints","pointArea","defaultPosition","pointSize","externalOnStop","onStop","externalOnDrag","onDrag","bounds","useCallback","x","y","style","T","number","isRequired","func","CropPoints","props","previewDims","otherProps","ratio","CropPointsDelimiters","lineWidth","lineColor","canvas","useRef","clearCanvas","ctx","sortPoints","drawShape","point1","point2","point3","point4","useEffect","sortedPoints","ref","buildImgContainerStyle","imageDimensions","Canvas","image","onDragStop","onChange","cropperRef","maxWidth","maxHeight","useOpenCv","cvLoaded","cv","canvasRef","previewCanvasRef","magnifierCanvasRef","useState","setPreviewDims","setCropPoints","loading","setLoading","mode","setMode","useImperativeHandle","backToCrop","done","opts","Promise","dst","bR","bL","tR","tL","sourceCoordinates","map","point","Math","destCoordinates","Ms","Md","transformMatrix","dsize","setPreviewPaneDimensions","transform","options","blur","th","thMode","thMeanCorrection","thBlockSize","thMax","grayScale","ksize","applyFilter","blob","resolve","showPreview","newPreviewDims","externalMaxWidth","window","externalMaxHeight","calculated","calcDims","imageResizeRatio","src","clearMagnifier","magnCtx","file","reader","reject","img","document","createCanvas","contours","hierarchy","rect","Object","contourCoordinates","detectContours","bootstrap","left","top","right","bottom","pointerEvents","current","string","Cropper","openCvPath","Header","className","ghost","title","column","Item","label","href","alt","aria-label","role","margin","rel","target","Dragger","Upload","App","cropState","setCropState","setImg","s","doSomething","a","console","log","preview","filterCvParams","ADAPTIVE_THRESH_GAUSSIAN_C","res","draggerProps","name","multiple","e","fileList","length","originFileObj","onClick","icon","CheckOutlined","undefined","innerWidth","PlusOutlined","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2f17f136.chunk.js","sourcesContent":["export const readFile = (file) => {\n  if (file instanceof File) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader()\n      reader.onload = (event) => {\n        resolve(reader.result)\n      }\n      reader.onerror = (err) => {\n        reject(err)\n      }\n      reader.readAsDataURL(file)\n    })\n  }\n  if (typeof file === 'string') {\n    return Promise.resolve(file)\n  }\n}\n\nexport const calcDims = (\n  width,\n  height,\n  externalMaxWidth,\n  externalMaxHeight\n) => {\n  const ratio = width / height\n\n  const maxWidth = externalMaxWidth || window.innerWidth\n  const maxHeight = externalMaxHeight || window.innerHeight\n  const calculated = {\n    width: maxWidth,\n    height: Math.round(maxWidth / ratio),\n    ratio: ratio\n  }\n\n  if (calculated.height > maxHeight) {\n    calculated.height = maxHeight\n    calculated.width = Math.round(maxHeight * ratio)\n  }\n  return calculated\n}\n","import React, { useCallback } from 'react'\nimport Draggable from 'react-draggable'\nimport T from 'prop-types'\n\nconst buildCropPointStyle = (size, pointBgColor, pointBorder) => ({\n  width: size,\n  height: size,\n  backgroundColor: pointBgColor,\n  border: pointBorder,\n  borderRadius: '100%',\n  position: 'absolute',\n  zIndex: 1001\n})\n\nconst CropPoint = ({\n  cropPoints,\n  pointArea,\n  defaultPosition,\n  pointSize,\n  pointBgColor = 'transparent',\n  pointBorder = '4px solid #3cabe2',\n  onStop: externalOnStop,\n  onDrag: externalOnDrag,\n  bounds\n}) => {\n  const onDrag = useCallback(\n    (_, position) => {\n      externalOnDrag(\n        {\n          ...position,\n          x: position.x + pointSize / 2,\n          y: position.y + pointSize / 2\n        },\n        pointArea\n      )\n    },\n    [externalOnDrag]\n  )\n\n  const onStop = useCallback(\n    (_, position) => {\n      externalOnStop(\n        {\n          ...position,\n          x: position.x + pointSize / 2,\n          y: position.y + pointSize / 2\n        },\n        pointArea,\n        cropPoints\n      )\n    },\n    [externalOnDrag, cropPoints]\n  )\n\n  return (\n    <Draggable\n      bounds={bounds}\n      defaultPosition={defaultPosition}\n      position={{\n        x: cropPoints[pointArea].x - pointSize / 2,\n        y: cropPoints[pointArea].y - pointSize / 2\n      }}\n      onDrag={onDrag}\n      onStop={onStop}\n    >\n      <div style={buildCropPointStyle(pointSize, pointBgColor, pointBorder)} />\n    </Draggable>\n  )\n}\n\nexport default CropPoint\n\nCropPoint.propTypes = {\n  cropPoints: T.shape({\n    'left-top': T.shape({ x: T.number, y: T.number }).isRequired,\n    'right-top': T.shape({ x: T.number, y: T.number }).isRequired,\n    'right-bottom': T.shape({ x: T.number, y: T.number }).isRequired,\n    'left-bottom': T.shape({ x: T.number, y: T.number }).isRequired\n  }),\n  pointArea: T.oneOf(['left-top', 'right-top', 'right-bottom', 'left-bottom']),\n  defaultPosition: T.shape({\n    x: T.number,\n    y: T.number\n  }),\n  pointSize: T.number,\n  pointBgColor: T.string,\n  pointBorder: T.string,\n  onStop: T.func,\n  onDrag: T.func\n}\n","import React, { Fragment } from 'react'\nimport CropPoint from './CropPoint'\nimport T from 'prop-types'\n\nconst CropPoints = (props) => {\n  const { previewDims, ...otherProps } = props\n  return (\n    <>\n      <CropPoint\n        pointArea='left-top'\n        defaultPosition={{ x: 0, y: 0 }}\n        {...otherProps}\n      />\n      <CropPoint\n        pointArea='right-top'\n        defaultPosition={{ x: previewDims.width, y: 0 }}\n        {...otherProps}\n      />\n      <CropPoint\n        pointArea='right-bottom'\n        defaultPosition={{ x: 0, y: previewDims.height }}\n        {...otherProps}\n      />\n      <CropPoint\n        pointArea='left-bottom'\n        defaultPosition={{\n          x: previewDims.width,\n          y: previewDims.height\n        }}\n        {...otherProps}\n      />\n    </>\n  )\n}\n\nexport default CropPoints\n\nCropPoints.propTypes = {\n  previewDims: T.shape({\n    ratio: T.number,\n    width: T.number,\n    height: T.number\n  })\n}\n","export const transform = (\n  cv,\n  docCanvas,\n  cropPoints,\n  imageResizeRatio,\n  setPreviewPaneDimensions\n) => {\n  const dst = cv.imread(docCanvas)\n\n  const bR = cropPoints['right-bottom']\n  const bL = cropPoints['left-bottom']\n  const tR = cropPoints['right-top']\n  const tL = cropPoints['left-top']\n\n  // create source coordinates matrix\n  const sourceCoordinates = [tL, tR, bR, bL].map((point) => [\n    point.x / imageResizeRatio,\n    point.y / imageResizeRatio\n  ])\n\n  // get max width\n  const maxWidth = Math.max(bR.x - bL.x, tR.x - tL.x) / imageResizeRatio\n  // get max height\n  const maxHeight = Math.max(bL.y - tL.y, bR.y - tR.y) / imageResizeRatio\n\n  // create dest coordinates matrix\n  const destCoordinates = [\n    [0, 0],\n    [maxWidth - 1, 0],\n    [maxWidth - 1, maxHeight - 1],\n    [0, maxHeight - 1]\n  ]\n\n  // convert to open cv matrix objects\n  const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...sourceCoordinates))\n  const Md = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...destCoordinates))\n  const transformMatrix = cv.getPerspectiveTransform(Ms, Md)\n  // set new image size\n  const dsize = new cv.Size(maxWidth, maxHeight)\n  // perform warp\n  cv.warpPerspective(\n    dst,\n    dst,\n    transformMatrix,\n    dsize,\n    cv.INTER_LINEAR,\n    cv.BORDER_CONSTANT,\n    new cv.Scalar()\n  )\n  cv.imshow(docCanvas, dst)\n\n  dst.delete()\n  Ms.delete()\n  Md.delete()\n  transformMatrix.delete()\n\n  setPreviewPaneDimensions()\n}\n\nexport const applyFilter = async (cv, docCanvas, filterCvParams) => {\n  // default options\n  const options = {\n    blur: false,\n    th: true,\n    thMode: cv.ADAPTIVE_THRESH_MEAN_C,\n    thMeanCorrection: 15,\n    thBlockSize: 25,\n    thMax: 255,\n    grayScale: true,\n    ...filterCvParams\n  }\n  const dst = cv.imread(docCanvas)\n\n  if (options.grayScale) {\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0)\n  }\n  if (options.blur) {\n    const ksize = new cv.Size(5, 5)\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT)\n  }\n  if (options.th) {\n    if (options.grayScale) {\n      cv.adaptiveThreshold(\n        dst,\n        dst,\n        options.thMax,\n        options.thMode,\n        cv.THRESH_BINARY,\n        options.thBlockSize,\n        options.thMeanCorrection\n      )\n    } else {\n      dst.convertTo(dst, -1, 1, 60)\n      cv.threshold(dst, dst, 170, 255, cv.THRESH_BINARY)\n    }\n  }\n  cv.imshow(docCanvas, dst)\n}\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport T from 'prop-types'\n\nconst CropPointsDelimiters = ({\n  cropPoints,\n  previewDims,\n  lineWidth = 3,\n  lineColor = '#3cabe2',\n  pointSize\n}) => {\n  const canvas = useRef()\n\n  const clearCanvas = useCallback(() => {\n    const ctx = canvas.current.getContext('2d')\n    ctx.clearRect(0, 0, previewDims.width, previewDims.height)\n  }, [canvas.current, previewDims])\n\n  const sortPoints = useCallback(() => {\n    const sortOrder = ['left-top', 'right-top', 'right-bottom', 'left-bottom']\n    return sortOrder.reduce(\n      (acc, pointPos) => [...acc, cropPoints[pointPos]],\n      []\n    )\n  }, [cropPoints])\n\n  const drawShape = useCallback(\n    ([point1, point2, point3, point4]) => {\n      const ctx = canvas.current.getContext('2d')\n      ctx.lineWidth = lineWidth\n      ctx.strokeStyle = lineColor\n\n      ctx.beginPath()\n      ctx.moveTo(point1.x + pointSize / 2, point1.y)\n      ctx.lineTo(point2.x - pointSize / 2, point2.y)\n\n      ctx.moveTo(point2.x, point2.y + pointSize / 2)\n      ctx.lineTo(point3.x, point3.y - pointSize / 2)\n\n      ctx.moveTo(point3.x - pointSize / 2, point3.y)\n      ctx.lineTo(point4.x + pointSize / 2, point4.y)\n\n      ctx.moveTo(point4.x, point4.y - pointSize / 2)\n      ctx.lineTo(point1.x, point1.y + pointSize / 2)\n      ctx.closePath()\n      ctx.stroke()\n    },\n    [canvas.current]\n  )\n\n  useEffect(() => {\n    if (cropPoints && canvas.current) {\n      clearCanvas()\n      const sortedPoints = sortPoints()\n      drawShape(sortedPoints)\n    }\n  }, [cropPoints, canvas.current])\n\n  return (\n    <canvas\n      ref={canvas}\n      style={{\n        position: 'absolute',\n        zIndex: 5\n      }}\n      width={previewDims.width}\n      height={previewDims.height}\n    />\n  )\n}\n\nexport default CropPointsDelimiters\n\nCropPointsDelimiters.propTypes = {\n  previewDims: T.shape({\n    ratio: T.number,\n    width: T.number,\n    height: T.number\n  }),\n  cropPoints: T.shape({\n    'left-top': T.shape({ x: T.number, y: T.number }).isRequired,\n    'right-top': T.shape({ x: T.number, y: T.number }).isRequired,\n    'right-bottom': T.shape({ x: T.number, y: T.number }).isRequired,\n    'left-bottom': T.shape({ x: T.number, y: T.number }).isRequired\n  }),\n  lineColor: T.string,\n  lineWidth: T.number,\n  pointSize: T.number\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n  Fragment\n} from 'react'\nimport { useOpenCv } from 'opencv-react'\nimport T from 'prop-types'\n\nimport { calcDims, readFile } from '../lib/utils'\nimport CropPoints from '../lib/CropPoints'\nimport { applyFilter, transform } from '../lib/imgManipulation'\nimport CropPointsDelimiters from './CropPointsDelimiters'\n\nconst buildImgContainerStyle = (previewDims) => ({\n  width: previewDims.width,\n  height: previewDims.height\n})\n\nconst imageDimensions = { width: 0, height: 0 }\nlet imageResizeRatio\n\nconst Canvas = ({\n  image,\n  onDragStop,\n  onChange,\n  cropperRef,\n  pointSize = 30,\n  lineWidth,\n  pointBgColor,\n  pointBorder,\n  lineColor,\n  maxWidth,\n  maxHeight\n}) => {\n  const { loaded: cvLoaded, cv } = useOpenCv()\n  const canvasRef = useRef()\n  const previewCanvasRef = useRef()\n  const magnifierCanvasRef = useRef()\n  const [previewDims, setPreviewDims] = useState()\n  const [cropPoints, setCropPoints] = useState()\n  const [loading, setLoading] = useState(false)\n  const [mode, setMode] = useState('crop')\n\n  useImperativeHandle(cropperRef, () => ({\n    backToCrop: () => {\n      setMode('crop')\n    },\n    done: async (opts = {}) => {\n      return new Promise((resolve) => {\n        setLoading(true)\n        transform(\n          cv,\n          canvasRef.current,\n          cropPoints,\n          imageResizeRatio,\n          setPreviewPaneDimensions\n        )\n        applyFilter(cv, canvasRef.current, opts.filterCvParams)\n        if (opts.preview) {\n          setMode('preview')\n        }\n        canvasRef.current.toBlob((blob) => {\n          blob.name = image.name\n          resolve(blob)\n          setLoading(false)\n        }, image.type)\n      })\n    }\n  }))\n\n  useEffect(() => {\n    if (mode === 'preview') {\n      showPreview()\n    }\n  }, [mode])\n\n  const setPreviewPaneDimensions = () => {\n    // set preview pane dimensions\n    const newPreviewDims = calcDims(\n      canvasRef.current.width,\n      canvasRef.current.height,\n      maxWidth,\n      maxHeight\n    )\n    setPreviewDims(newPreviewDims)\n\n    previewCanvasRef.current.width = newPreviewDims.width\n    previewCanvasRef.current.height = newPreviewDims.height\n\n    imageResizeRatio = newPreviewDims.width / canvasRef.current.width\n  }\n\n  const createCanvas = (src) => {\n    return new Promise((resolve, reject) => {\n      const img = document.createElement('img')\n      img.onload = async () => {\n        // set edited image canvas and dimensions\n        canvasRef.current = document.createElement('canvas')\n        canvasRef.current.width = img.width\n        canvasRef.current.height = img.height\n        const ctx = canvasRef.current.getContext('2d')\n        ctx.drawImage(img, 0, 0)\n        imageDimensions.width = canvasRef.current.width\n        imageDimensions.height = canvasRef.current.height\n        setPreviewPaneDimensions()\n        resolve()\n      }\n      img.src = src\n    })\n  }\n\n  const showPreview = (image) => {\n    const src = image || cv.imread(canvasRef.current)\n    const dst = new cv.Mat()\n    const dsize = new cv.Size(0, 0)\n    cv.resize(\n      src,\n      dst,\n      dsize,\n      imageResizeRatio,\n      imageResizeRatio,\n      cv.INTER_AREA\n    )\n    cv.imshow(previewCanvasRef.current, dst)\n    src.delete()\n    dst.delete()\n  }\n\n  const detectContours = () => {\n    const dst = cv.imread(canvasRef.current)\n    const ksize = new cv.Size(5, 5)\n    // convert the image to grayscale, blur it, and find edges in the image\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0)\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT)\n    cv.Canny(dst, dst, 75, 200)\n    // find contours\n    cv.threshold(dst, dst, 120, 200, cv.THRESH_BINARY)\n    const contours = new cv.MatVector()\n    const hierarchy = new cv.Mat()\n    cv.findContours(\n      dst,\n      contours,\n      hierarchy,\n      cv.RETR_CCOMP,\n      cv.CHAIN_APPROX_SIMPLE\n    )\n    const rect = cv.boundingRect(dst)\n    dst.delete()\n    hierarchy.delete()\n    contours.delete()\n    // transform the rectangle into a set of points\n    Object.keys(rect).forEach((key) => {\n      rect[key] = rect[key] * imageResizeRatio\n    })\n\n    const contourCoordinates = {\n      'left-top': { x: rect.x, y: rect.y },\n      'right-top': { x: rect.x + rect.width, y: rect.y },\n      'right-bottom': {\n        x: rect.x + rect.width,\n        y: rect.y + rect.height\n      },\n      'left-bottom': { x: rect.x, y: rect.y + rect.height }\n    }\n\n    setCropPoints(contourCoordinates)\n  }\n\n  const clearMagnifier = () => {\n    const magnCtx = magnifierCanvasRef.current.getContext('2d')\n    magnCtx.clearRect(\n      0,\n      0,\n      magnifierCanvasRef.current.width,\n      magnifierCanvasRef.current.height\n    )\n  }\n\n  useEffect(() => {\n    if (onChange) {\n      onChange({ ...cropPoints, loading })\n    }\n  }, [cropPoints, loading])\n\n  useEffect(() => {\n    const bootstrap = async () => {\n      const src = await readFile(image)\n      await createCanvas(src)\n      showPreview()\n      detectContours()\n      setLoading(false)\n    }\n\n    if (image && previewCanvasRef.current && cvLoaded && mode === 'crop') {\n      bootstrap()\n    } else {\n      setLoading(true)\n    }\n  }, [image, previewCanvasRef.current, cvLoaded, mode])\n\n  const onDrag = useCallback((position, area) => {\n    const { x, y } = position\n\n    const magnCtx = magnifierCanvasRef.current.getContext('2d')\n    clearMagnifier()\n\n    // TODO we should make those 5, 10 and 20 values proportionate\n    // to the point size\n    magnCtx.drawImage(\n      previewCanvasRef.current,\n      x - (pointSize - 10),\n      y - (pointSize - 10),\n      pointSize + 5,\n      pointSize + 5,\n      x + 10,\n      y - 90,\n      pointSize + 20,\n      pointSize + 20\n    )\n\n    setCropPoints((cPs) => ({ ...cPs, [area]: { x, y } }))\n  }, [])\n\n  const onStop = useCallback((position, area, cropPoints) => {\n    const { x, y } = position\n    clearMagnifier()\n    setCropPoints((cPs) => ({ ...cPs, [area]: { x, y } }))\n    if (onDragStop) {\n      onDragStop({ ...cropPoints, [area]: { x, y } })\n    }\n  }, [])\n\n  return (\n    <div\n      style={{\n        position: 'relative',\n        ...(previewDims && buildImgContainerStyle(previewDims))\n      }}\n    >\n      {previewDims && mode === 'crop' && cropPoints && (\n        <Fragment>\n          <CropPoints\n            pointSize={pointSize}\n            pointBgColor={pointBgColor}\n            pointBorder={pointBorder}\n            cropPoints={cropPoints}\n            previewDims={previewDims}\n            onDrag={onDrag}\n            onStop={onStop}\n            bounds={{\n              left: previewCanvasRef?.current?.offsetLeft - pointSize / 2,\n              top: previewCanvasRef?.current?.offsetTop - pointSize / 2,\n              right:\n                previewCanvasRef?.current?.offsetLeft -\n                pointSize / 2 +\n                previewCanvasRef?.current?.offsetWidth,\n              bottom:\n                previewCanvasRef?.current?.offsetTop -\n                pointSize / 2 +\n                previewCanvasRef?.current?.offsetHeight\n            }}\n          />\n          <CropPointsDelimiters\n            previewDims={previewDims}\n            cropPoints={cropPoints}\n            lineWidth={lineWidth}\n            lineColor={lineColor}\n            pointSize={pointSize}\n          />\n          <canvas\n            style={{\n              position: 'absolute',\n              zIndex: 5,\n              pointerEvents: 'none'\n            }}\n            width={previewDims.width}\n            height={previewDims.height}\n            ref={magnifierCanvasRef}\n          />\n        </Fragment>\n      )}\n\n      <canvas\n        style={{ zIndex: 5, pointerEvents: 'none' }}\n        ref={previewCanvasRef}\n      />\n    </div>\n  )\n}\n\nexport default Canvas\n\nCanvas.propTypes = {\n  image: T.object.isRequired,\n  onDragStop: T.func,\n  onChange: T.func,\n  cropperRef: T.shape({\n    current: T.shape({\n      done: T.func.isRequired,\n      backToCrop: T.func.isRequired\n    })\n  }),\n  pointSize: T.number,\n  lineWidth: T.number,\n  pointBgColor: T.string,\n  pointBorder: T.string,\n  lineColor: T.string\n}\n","import React from 'react'\nimport { OpenCvProvider } from 'opencv-react'\nimport Canvas from '../lib/Canvas'\nimport T from 'prop-types'\n\nconst Cropper = React.forwardRef((props, ref) => {\n  if (!props.image) {\n    return null\n  }\n\n  return (\n    <OpenCvProvider openCvPath={props.openCvPath}>\n      <Canvas {...props} cropperRef={ref} />\n    </OpenCvProvider>\n  )\n})\n\nexport default Cropper\n\nCropper.propTypes = {\n  openCvPath: T.string\n}\n","import { Descriptions, PageHeader } from 'antd'\nimport Paragraph from 'antd/lib/typography/Paragraph'\nimport React from 'react'\n\nconst Header = () => {\n  return (\n    <div className='site-page-header'>\n      <PageHeader ghost={false} title='react-perspective-cropper'>\n        <Descriptions size='small' column={2}>\n          <Descriptions.Item label='Package'>\n            <a href='https://www.npmjs.com/package/react-perspective-cropper'>\n              <img\n                alt='npm'\n                src='https://img.shields.io/npm/v/react-perspective-cropper.svg'\n              />\n            </a>\n            <a href='https://standardjs.com'>\n              <img\n                alt='standardjs'\n                src='https://img.shields.io/badge/code_style-standard-brightgreen.svg'\n              />\n            </a>\n          </Descriptions.Item>\n          <Descriptions.Item label='Description'>\n            <Paragraph>\n              React component performing border detection, perspective\n              correction and simple image filters over a provided image 📲 📸\n            </Paragraph>\n          </Descriptions.Item>\n          <Descriptions.Item label='Created by'>\n            Giacomo Cerquone from\n            <span\n              aria-label='italy flag'\n              role='img'\n              style={{ margin: '0 10px' }}\n            >\n              🇮🇹\n            </span>\n            with{' '}\n            <span aria-label='heart' role='img' style={{ margin: '0 10px' }}>\n              ❤️\n            </span>\n          </Descriptions.Item>\n          <Descriptions.Item label='Info'>\n            <Paragraph>\n              Make sure to only use HiRes images!\n              <br />\n              <b>\n                <a\n                  rel='noreferrer'\n                  target='_blank'\n                  href='https://github.com/giacomocerquone/react-perspective-cropper/blob/master/gifs/example-img.jpg?raw=true'\n                >\n                  You could use this image for example.\n                </a>\n              </b>\n            </Paragraph>\n          </Descriptions.Item>\n        </Descriptions>\n      </PageHeader>\n    </div>\n  )\n}\n\nexport default Header\n","import React, { useCallback, useRef, useState } from 'react'\nimport { Button, Spin, Upload } from 'antd'\nimport { CheckOutlined, PlusOutlined } from '@ant-design/icons'\nimport Cropper from 'react-perspective-cropper'\n\nimport './App.css'\nimport Header from './components/Header'\n\nconst { Dragger } = Upload\n\nconst App = () => {\n  const [cropState, setCropState] = useState()\n  const [img, setImg] = useState()\n  const cropperRef = useRef()\n\n  const onDragStop = useCallback((s) => setCropState(s), [])\n  const onChange = useCallback((s) => setCropState(s), [])\n\n  const doSomething = async () => {\n    console.log('CropState', cropState)\n    try {\n      const res = await cropperRef.current.done({\n        preview: true,\n        filterCvParams: {\n          thMeanCorrection: 13,\n          thMode: window.cv.ADAPTIVE_THRESH_GAUSSIAN_C\n        }\n      })\n      console.log('Cropped and filtered image', res)\n    } catch (e) {\n      console.log('error', e)\n    }\n  }\n\n  const onImgSelection = async (e) => {\n    if (e.fileList && e.fileList.length > 0) {\n      // it can also be a http or base64 string for example\n      setImg(e.fileList[0].originFileObj)\n    }\n  }\n\n  const draggerProps = {\n    name: 'file',\n    multiple: false,\n    onChange: onImgSelection\n  }\n\n  return (\n    <div className='root-container'>\n      <Header />\n      <div className='content-container'>\n        {cropState && (\n          <div className='buttons-container'>\n            <Button onClick={doSomething} icon={<CheckOutlined />}>\n              Done\n            </Button>\n            <Button\n              onClick={() => {\n                cropperRef.current.backToCrop()\n              }}\n            >\n              Back\n            </Button>\n            <Button\n              onClick={() => {\n                setImg(undefined)\n                setCropState()\n              }}\n            >\n              Reset\n            </Button>\n          </div>\n        )}\n        <Cropper\n          openCvPath='./opencv/opencv.js'\n          ref={cropperRef}\n          image={img}\n          onChange={onChange}\n          onDragStop={onDragStop}\n          maxWidth={window.innerWidth - 10}\n        />\n        {cropState?.loading && <Spin />}\n        {!img && (\n          <Dragger {...draggerProps}>\n            <p>\n              <PlusOutlined />\n            </p>\n            <p>Upload</p>\n          </Dragger>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}