{"version":3,"sources":["../../src/lib/utils.js","../../src/lib/CropPoint.js","../../src/lib/CropPoints.js","../../src/lib/imgManipulation.js","../../src/lib/CropPointsDelimiters.js","../../src/lib/Canvas.js","../../src/components/Cropper.js","components/Header.js","App.js","index.js"],"names":["CropPoint","size","color","cropPoints","pointArea","defaultPosition","pointSize","pointColor","externalOnStop","onStop","externalOnDrag","onDrag","bounds","useCallback","x","position","y","style","width","height","backgroundColor","borderRadius","zIndex","T","number","isRequired","func","CropPoints","props","previewDims","otherProps","ratio","CropPointsDelimiters","lineWidth","lineColor","canvas","useRef","clearCanvas","ctx","sortPoints","drawShape","sortedPoints","index","point","nextPoint","useEffect","ref","buildImgContainerStyle","imageDimensions","Canvas","image","onDragStop","onChange","cropperRef","maxWidth","maxHeight","useOpenCv","cvLoaded","cv","canvasRef","previewCanvasRef","useState","setPreviewDims","setCropPoints","loading","setLoading","mode","setMode","useImperativeHandle","backToCrop","done","opts","Promise","dst","bR","bL","tR","tL","sourceCoordinates","map","Math","destCoordinates","Ms","Md","transformMatrix","dsize","setPreviewPaneDimensions","transform","options","blur","th","thMode","thMeanCorrection","thBlockSize","thMax","grayScale","ksize","applyFilter","resolve","showPreview","newPreviewDims","window","calculated","calcDims","imageResizeRatio","src","file","reader","reject","img","document","createCanvas","contours","hierarchy","rect","Object","contourCoordinates","detectContours","bootstrap","left","top","right","bottom","pointerEvents","current","string","openCvPath","Header","className","ghost","title","column","Item","label","href","alt","aria-label","role","margin","rel","target","Dragger","Upload","App","cropState","setCropState","setImg","s","doSomething","a","console","log","preview","filterCvParams","ADAPTIVE_THRESH_GAUSSIAN_C","res","draggerProps","name","multiple","e","fileList","length","originFileObj","onClick","icon","CheckOutlined","undefined","PlusOutlined","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.03191ad7.chunk.js","sourcesContent":["export const readFile = (file) => {\n  if (file instanceof File) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader()\n      reader.onload = (event) => {\n        resolve(reader.result)\n      }\n      reader.onerror = (err) => {\n        reject(err)\n      }\n      reader.readAsDataURL(file)\n    })\n  }\n  if (typeof file === 'string') {\n    return Promise.resolve(file)\n  }\n}\n\nexport const calcDims = (\n  width,\n  height,\n  externalMaxWidth,\n  externalMaxHeight\n) => {\n  const ratio = width / height\n\n  const maxWidth = window.innerWidth || externalMaxWidth\n  const maxHeight = window.innerHeight || externalMaxHeight\n  const calculated = {\n    width: maxWidth,\n    height: Math.round(maxWidth / ratio),\n    ratio: ratio\n  }\n\n  if (calculated.height > maxHeight) {\n    calculated.height = maxHeight\n    calculated.width = Math.round(maxHeight * ratio)\n  }\n  return calculated\n}\n","import React, { useCallback } from 'react'\nimport Draggable from 'react-draggable'\nimport T from 'prop-types'\n\nconst buildCropPointStyle = (size, color) => ({\n  width: size,\n  height: size,\n  backgroundColor: color,\n  borderRadius: '100%',\n  position: 'absolute',\n  zIndex: 1001\n})\n\nconst CropPoint = ({\n  cropPoints,\n  pointArea,\n  defaultPosition,\n  pointSize,\n  pointColor = '#3cabe2',\n  onStop: externalOnStop,\n  onDrag: externalOnDrag,\n  bounds\n}) => {\n  const onDrag = useCallback(\n    (_, position) => {\n      externalOnDrag(\n        {\n          ...position,\n          x: position.x + pointSize / 2,\n          y: position.y + pointSize / 2\n        },\n        pointArea\n      )\n    },\n    [externalOnDrag]\n  )\n\n  const onStop = useCallback(\n    (_, position) => {\n      externalOnStop(\n        {\n          ...position,\n          x: position.x + pointSize / 2,\n          y: position.y + pointSize / 2\n        },\n        pointArea,\n        cropPoints\n      )\n    },\n    [externalOnDrag, cropPoints]\n  )\n\n  return (\n    <Draggable\n      bounds={bounds}\n      defaultPosition={defaultPosition}\n      position={{\n        x: cropPoints[pointArea].x - pointSize / 2,\n        y: cropPoints[pointArea].y - pointSize / 2\n      }}\n      onDrag={onDrag}\n      onStop={onStop}\n    >\n      <div style={buildCropPointStyle(pointSize, pointColor)} />\n    </Draggable>\n  )\n}\n\nexport default CropPoint\n\nCropPoint.propTypes = {\n  cropPoints: T.shape({\n    'left-top': T.shape({ x: T.number, y: T.number }).isRequired,\n    'right-top': T.shape({ x: T.number, y: T.number }).isRequired,\n    'right-bottom': T.shape({ x: T.number, y: T.number }).isRequired,\n    'left-bottom': T.shape({ x: T.number, y: T.number }).isRequired\n  }),\n  pointArea: T.oneOf(['left-top', 'right-top', 'right-bottom', 'left-bottom']),\n  defaultPosition: T.shape({\n    x: T.number,\n    y: T.number\n  }),\n  pointSize: T.number,\n  pointColor: T.string,\n  onStop: T.func,\n  onDrag: T.func\n}\n","import React, { Fragment } from 'react'\nimport CropPoint from './CropPoint'\nimport T from 'prop-types'\n\nconst CropPoints = (props) => {\n  const { previewDims, ...otherProps } = props\n  return (\n    <>\n      <CropPoint\n        pointArea='left-top'\n        defaultPosition={{ x: 0, y: 0 }}\n        {...otherProps}\n      />\n      <CropPoint\n        pointArea='right-top'\n        defaultPosition={{ x: previewDims.width, y: 0 }}\n        {...otherProps}\n      />\n      <CropPoint\n        pointArea='right-bottom'\n        defaultPosition={{ x: 0, y: previewDims.height }}\n        {...otherProps}\n      />\n      <CropPoint\n        pointArea='left-bottom'\n        defaultPosition={{\n          x: previewDims.width,\n          y: previewDims.height\n        }}\n        {...otherProps}\n      />\n    </>\n  )\n}\n\nexport default CropPoints\n\nCropPoints.propTypes = {\n  previewDims: T.shape({\n    ratio: T.number,\n    width: T.number,\n    height: T.number\n  })\n}\n","export const transform = (\n  cv,\n  docCanvas,\n  cropPoints,\n  imageResizeRatio,\n  setPreviewPaneDimensions\n) => {\n  const dst = cv.imread(docCanvas)\n\n  const bR = cropPoints['right-bottom']\n  const bL = cropPoints['left-bottom']\n  const tR = cropPoints['right-top']\n  const tL = cropPoints['left-top']\n\n  // create source coordinates matrix\n  const sourceCoordinates = [tL, tR, bR, bL].map((point) => [\n    point.x / imageResizeRatio,\n    point.y / imageResizeRatio\n  ])\n\n  // get max width\n  const maxWidth = Math.max(bR.x - bL.x, tR.x - tL.x) / imageResizeRatio\n  // get max height\n  const maxHeight = Math.max(bL.y - tL.y, bR.y - tR.y) / imageResizeRatio\n\n  // create dest coordinates matrix\n  const destCoordinates = [\n    [0, 0],\n    [maxWidth - 1, 0],\n    [maxWidth - 1, maxHeight - 1],\n    [0, maxHeight - 1]\n  ]\n\n  // convert to open cv matrix objects\n  const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...sourceCoordinates))\n  const Md = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...destCoordinates))\n  const transformMatrix = cv.getPerspectiveTransform(Ms, Md)\n  // set new image size\n  const dsize = new cv.Size(maxWidth, maxHeight)\n  // perform warp\n  cv.warpPerspective(\n    dst,\n    dst,\n    transformMatrix,\n    dsize,\n    cv.INTER_LINEAR,\n    cv.BORDER_CONSTANT,\n    new cv.Scalar()\n  )\n  cv.imshow(docCanvas, dst)\n\n  dst.delete()\n  Ms.delete()\n  Md.delete()\n  transformMatrix.delete()\n\n  setPreviewPaneDimensions()\n}\n\nexport const applyFilter = async (cv, docCanvas, filterCvParams) => {\n  // default options\n  const options = {\n    blur: false,\n    th: true,\n    thMode: cv.ADAPTIVE_THRESH_MEAN_C,\n    thMeanCorrection: 15,\n    thBlockSize: 25,\n    thMax: 255,\n    grayScale: true,\n    ...filterCvParams\n  }\n  const dst = cv.imread(docCanvas)\n\n  if (options.grayScale) {\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0)\n  }\n  if (options.blur) {\n    const ksize = new cv.Size(5, 5)\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT)\n  }\n  if (options.th) {\n    if (options.grayScale) {\n      cv.adaptiveThreshold(\n        dst,\n        dst,\n        options.thMax,\n        options.thMode,\n        cv.THRESH_BINARY,\n        options.thBlockSize,\n        options.thMeanCorrection\n      )\n    } else {\n      dst.convertTo(dst, -1, 1, 60)\n      cv.threshold(dst, dst, 170, 255, cv.THRESH_BINARY)\n    }\n  }\n  cv.imshow(docCanvas, dst)\n}\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport T from 'prop-types'\n\nconst CropPointsDelimiters = ({\n  cropPoints,\n  previewDims,\n  lineWidth = 3,\n  lineColor = '#3cabe2'\n}) => {\n  const canvas = useRef()\n\n  const clearCanvas = useCallback(() => {\n    const ctx = canvas.current.getContext('2d')\n    ctx.clearRect(0, 0, previewDims.width, previewDims.height)\n  }, [canvas.current, previewDims])\n\n  const sortPoints = useCallback(() => {\n    const sortOrder = ['left-top', 'right-top', 'right-bottom', 'left-bottom']\n    return sortOrder.reduce(\n      (acc, pointPos) => [...acc, cropPoints[pointPos]],\n      []\n    )\n  }, [cropPoints])\n\n  const drawShape = useCallback(\n    (sortedPoints) => {\n      const ctx = canvas.current.getContext('2d')\n      ctx.lineWidth = lineWidth\n      ctx.strokeStyle = lineColor\n      ctx.beginPath()\n      sortedPoints.forEach((point, index) => {\n        if (index === 0) {\n          ctx.moveTo(point.x, point.y)\n        }\n        if (index !== sortedPoints.length - 1) {\n          const nextPoint = sortedPoints[index + 1]\n          ctx.lineTo(nextPoint.x, nextPoint.y)\n        } else {\n          ctx.closePath()\n        }\n      })\n      ctx.stroke()\n    },\n    [canvas.current]\n  )\n\n  useEffect(() => {\n    if (cropPoints && canvas.current) {\n      clearCanvas()\n      const sortedPoints = sortPoints()\n      drawShape(sortedPoints)\n    }\n  }, [cropPoints, canvas.current])\n\n  return (\n    <canvas\n      ref={canvas}\n      style={{\n        position: 'absolute',\n        zIndex: 5,\n        width: previewDims.width,\n        height: previewDims.height\n      }}\n      width={previewDims.width}\n      height={previewDims.height}\n    />\n  )\n}\n\nexport default CropPointsDelimiters\n\nCropPointsDelimiters.propTypes = {\n  previewDims: T.shape({\n    ratio: T.number,\n    width: T.number,\n    height: T.number\n  }),\n  cropPoints: T.shape({\n    'left-top': T.shape({ x: T.number, y: T.number }).isRequired,\n    'right-top': T.shape({ x: T.number, y: T.number }).isRequired,\n    'right-bottom': T.shape({ x: T.number, y: T.number }).isRequired,\n    'left-bottom': T.shape({ x: T.number, y: T.number }).isRequired\n  }),\n  lineColor: T.string,\n  lineWidth: T.number\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState\n} from 'react'\nimport { useOpenCv } from 'opencv-react'\nimport T from 'prop-types'\n\nimport { calcDims, readFile } from '../lib/utils'\nimport CropPoints from '../lib/CropPoints'\nimport { applyFilter, transform } from '../lib/imgManipulation'\nimport CropPointsDelimiters from './CropPointsDelimiters'\n\nconst buildImgContainerStyle = (previewDims) => ({\n  width: previewDims.width,\n  height: previewDims.height\n})\n\nconst imageDimensions = { width: 0, height: 0 }\nlet imageResizeRatio\n\nconst Canvas = ({\n  image,\n  onDragStop,\n  onChange,\n  cropperRef,\n  pointSize = 20,\n  lineWidth,\n  pointColor,\n  lineColor,\n  maxWidth,\n  maxHeight\n}) => {\n  const { loaded: cvLoaded, cv } = useOpenCv()\n  const canvasRef = useRef()\n  const previewCanvasRef = useRef()\n  const [previewDims, setPreviewDims] = useState()\n  const [cropPoints, setCropPoints] = useState()\n  const [loading, setLoading] = useState(false)\n  const [mode, setMode] = useState('crop')\n\n  useImperativeHandle(cropperRef, () => ({\n    backToCrop: () => {\n      setMode('crop')\n    },\n    done: async (opts = {}) => {\n      return new Promise((resolve) => {\n        setLoading(true)\n        transform(\n          cv,\n          canvasRef.current,\n          cropPoints,\n          imageResizeRatio,\n          setPreviewPaneDimensions\n        )\n        applyFilter(cv, canvasRef.current, opts.filterCvParams)\n        if (opts.preview) {\n          setMode('preview')\n        }\n        canvasRef.current.toBlob((blob) => {\n          resolve(blob)\n          setLoading(false)\n        }, image.type)\n      })\n    }\n  }))\n\n  useEffect(() => {\n    if (mode === 'preview') {\n      showPreview()\n    }\n  }, [mode])\n\n  const setPreviewPaneDimensions = () => {\n    // set preview pane dimensions\n    const newPreviewDims = calcDims(\n      canvasRef.current.width,\n      canvasRef.current.height,\n      maxWidth,\n      maxHeight\n    )\n    setPreviewDims(newPreviewDims)\n\n    previewCanvasRef.current.width = newPreviewDims.width\n    previewCanvasRef.current.height = newPreviewDims.height\n\n    imageResizeRatio = newPreviewDims.width / canvasRef.current.width\n  }\n\n  const createCanvas = (src) => {\n    return new Promise((resolve, reject) => {\n      const img = document.createElement('img')\n      img.onload = async () => {\n        // set edited image canvas and dimensions\n        canvasRef.current = document.createElement('canvas')\n        canvasRef.current.width = img.width\n        canvasRef.current.height = img.height\n        const ctx = canvasRef.current.getContext('2d')\n        ctx.drawImage(img, 0, 0)\n        imageDimensions.width = canvasRef.current.width\n        imageDimensions.height = canvasRef.current.height\n        setPreviewPaneDimensions()\n        resolve()\n      }\n      img.src = src\n    })\n  }\n\n  const showPreview = (image) => {\n    const src = image || cv.imread(canvasRef.current)\n    const dst = new cv.Mat()\n    const dsize = new cv.Size(0, 0)\n    cv.resize(\n      src,\n      dst,\n      dsize,\n      imageResizeRatio,\n      imageResizeRatio,\n      cv.INTER_AREA\n    )\n    cv.imshow(previewCanvasRef.current, dst)\n    src.delete()\n    dst.delete()\n  }\n\n  const detectContours = () => {\n    const dst = cv.imread(canvasRef.current)\n    const ksize = new cv.Size(5, 5)\n    // convert the image to grayscale, blur it, and find edges in the image\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0)\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT)\n    cv.Canny(dst, dst, 75, 200)\n    // find contours\n    cv.threshold(dst, dst, 120, 200, cv.THRESH_BINARY)\n    const contours = new cv.MatVector()\n    const hierarchy = new cv.Mat()\n    cv.findContours(\n      dst,\n      contours,\n      hierarchy,\n      cv.RETR_CCOMP,\n      cv.CHAIN_APPROX_SIMPLE\n    )\n    const rect = cv.boundingRect(dst)\n    dst.delete()\n    hierarchy.delete()\n    contours.delete()\n    // transform the rectangle into a set of points\n    Object.keys(rect).forEach((key) => {\n      rect[key] = rect[key] * imageResizeRatio\n    })\n\n    const contourCoordinates = {\n      'left-top': { x: rect.x, y: rect.y },\n      'right-top': { x: rect.x + rect.width, y: rect.y },\n      'right-bottom': {\n        x: rect.x + rect.width,\n        y: rect.y + rect.height\n      },\n      'left-bottom': { x: rect.x, y: rect.y + rect.height }\n    }\n\n    setCropPoints(contourCoordinates)\n  }\n\n  useEffect(() => {\n    if (onChange) {\n      onChange({ ...cropPoints, loading })\n    }\n  }, [cropPoints, loading])\n\n  useEffect(() => {\n    const bootstrap = async () => {\n      const src = await readFile(image)\n      await createCanvas(src)\n      showPreview()\n      detectContours()\n      setLoading(false)\n    }\n\n    if (image && previewCanvasRef.current && cvLoaded && mode === 'crop') {\n      bootstrap()\n    } else {\n      setLoading(true)\n    }\n  }, [image, previewCanvasRef.current, cvLoaded, mode])\n\n  const onDrag = useCallback((position, area) => {\n    const { x, y } = position\n    setCropPoints((cPs) => ({ ...cPs, [area]: { x, y } }))\n  }, [])\n\n  const onStop = useCallback((position, area, cropPoints) => {\n    const { x, y } = position\n    setCropPoints((cPs) => ({ ...cPs, [area]: { x, y } }))\n    if (onDragStop) {\n      onDragStop({ ...cropPoints, [area]: { x, y } })\n    }\n  }, [])\n\n  return (\n    <div\n      style={{\n        position: 'relative',\n        ...(previewDims && buildImgContainerStyle(previewDims))\n      }}\n    >\n      {previewDims && mode === 'crop' && cropPoints && (\n        <CropPoints\n          pointSize={pointSize}\n          pointColor={pointColor}\n          cropPoints={cropPoints}\n          previewDims={previewDims}\n          onDrag={onDrag}\n          onStop={onStop}\n          bounds={{\n            left: previewCanvasRef?.current?.offsetLeft - pointSize / 2,\n            top: previewCanvasRef?.current?.offsetTop - pointSize / 2,\n            right:\n              previewCanvasRef?.current?.offsetLeft -\n              pointSize / 2 +\n              previewCanvasRef?.current?.offsetWidth,\n            bottom:\n              previewCanvasRef?.current?.offsetTop -\n              pointSize / 2 +\n              previewCanvasRef?.current?.offsetHeight\n          }}\n        />\n      )}\n      {previewDims && mode === 'crop' && cropPoints && (\n        <CropPointsDelimiters\n          previewDims={previewDims}\n          cropPoints={cropPoints}\n          lineWidth={lineWidth}\n          lineColor={lineColor}\n        />\n      )}\n      <canvas\n        style={{ zIndex: 5, pointerEvents: 'none' }}\n        ref={previewCanvasRef}\n      />\n    </div>\n  )\n}\n\nexport default Canvas\n\nCanvas.propTypes = {\n  image: T.object.isRequired,\n  onDragStop: T.func,\n  onChange: T.func,\n  cropperRef: T.shape({\n    current: T.shape({\n      done: T.func.isRequired,\n      backToCrop: T.func.isRequired\n    })\n  }),\n  pointSize: T.number,\n  lineWidth: T.number,\n  pointColor: T.string,\n  lineColor: T.string\n}\n","import React from 'react'\nimport { OpenCvProvider } from 'opencv-react'\nimport Canvas from '../lib/Canvas'\n\nconst Cropper = React.forwardRef((props, ref) => {\n  if (!props.image) {\n    return null\n  }\n\n  return (\n    <OpenCvProvider openCvPath='./opencv/opencv.js'>\n      <Canvas {...props} cropperRef={ref} />\n    </OpenCvProvider>\n  )\n})\n\nexport default Cropper\n","import { Descriptions, PageHeader } from 'antd'\nimport Paragraph from 'antd/lib/typography/Paragraph'\nimport React from 'react'\n\nconst Header = () => {\n  return (\n    <div className='site-page-header'>\n      <PageHeader ghost={false} title='react-perspective-cropper'>\n        <Descriptions size='small' column={2}>\n          <Descriptions.Item label='Package'>\n            <a href='https://www.npmjs.com/package/react-perspective-cropper'>\n              <img\n                alt='npm'\n                src='https://img.shields.io/npm/v/react-perspective-cropper.svg'\n              />\n            </a>\n            <a href='https://standardjs.com'>\n              <img\n                alt='standardjs'\n                src='https://img.shields.io/badge/code_style-standard-brightgreen.svg'\n              />\n            </a>\n          </Descriptions.Item>\n          <Descriptions.Item label='Description'>\n            <Paragraph>\n              React component performing border detection, perspective\n              correction and simple image filters over a provided image 📲 📸\n            </Paragraph>\n          </Descriptions.Item>\n          <Descriptions.Item label='Created by'>\n            Giacomo Cerquone from\n            <span\n              aria-label='italy flag'\n              role='img'\n              style={{ margin: '0 10px' }}\n            >\n              🇮🇹\n            </span>\n            with{' '}\n            <span aria-label='heart' role='img' style={{ margin: '0 10px' }}>\n              ❤️\n            </span>\n          </Descriptions.Item>\n          <Descriptions.Item label='Info'>\n            <Paragraph>\n              Make sure to only use HiRes images!\n              <br />\n              <b>\n                <a\n                  rel='noreferrer'\n                  target='_blank'\n                  href='https://github.com/giacomocerquone/react-perspective-cropper/blob/master/gifs/example-img.jpg?raw=true'\n                >\n                  You could use this image for example.\n                </a>\n              </b>\n            </Paragraph>\n          </Descriptions.Item>\n        </Descriptions>\n      </PageHeader>\n    </div>\n  )\n}\n\nexport default Header\n","import React, { useCallback, useRef, useState } from 'react'\nimport { Button, Spin, Upload } from 'antd'\nimport { CheckOutlined, PlusOutlined } from '@ant-design/icons'\nimport Cropper from 'react-perspective-cropper'\n\nimport './App.css'\nimport Header from './components/Header'\n\nconst { Dragger } = Upload\n\nconst App = () => {\n  const [cropState, setCropState] = useState()\n  const [img, setImg] = useState()\n  const cropperRef = useRef()\n\n  const onDragStop = useCallback((s) => setCropState(s), [])\n  const onChange = useCallback((s) => setCropState(s), [])\n\n  const doSomething = async () => {\n    console.log('CropState', cropState)\n    try {\n      const res = await cropperRef.current.done({\n        preview: true,\n        filterCvParams: {\n          thMeanCorrection: 13,\n          thMode: window.cv.ADAPTIVE_THRESH_GAUSSIAN_C\n        }\n      })\n      console.log('Cropped and filtered image', res)\n    } catch (e) {\n      console.log('error', e)\n    }\n  }\n\n  const onImgSelection = async (e) => {\n    if (e.fileList && e.fileList.length > 0) {\n      // it can also be a http or base64 string for example\n      setImg(e.fileList[0].originFileObj)\n    }\n  }\n\n  const draggerProps = {\n    name: 'file',\n    multiple: false,\n    onChange: onImgSelection\n  }\n\n  return (\n    <div className='root-container'>\n      <Header />\n      <div className='content-container'>\n        {cropState && (\n          <div className='buttons-container'>\n            <Button onClick={doSomething} icon={<CheckOutlined />}>\n              Done\n            </Button>\n            <Button\n              onClick={() => {\n                cropperRef.current.backToCrop()\n              }}\n            >\n              Back\n            </Button>\n            <Button\n              onClick={() => {\n                setImg(undefined)\n                setCropState()\n              }}\n            >\n              Reset\n            </Button>\n          </div>\n        )}\n        <Cropper\n          ref={cropperRef}\n          image={img}\n          onChange={onChange}\n          onDragStop={onDragStop}\n        />\n        {cropState?.loading && <Spin />}\n        {!img && (\n          <Dragger {...draggerProps}>\n            <p>\n              <PlusOutlined />\n            </p>\n            <p>Upload</p>\n          </Dragger>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}