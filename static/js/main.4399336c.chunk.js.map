{"version":3,"sources":["../../src/lib/utils.js","../../src/hooks/useRefCallback.js","../../src/lib/CropPoint.js","../../src/lib/CropPoints.js","../../src/lib/imgManipulation.js","../../src/lib/CropPointsDelimiters.js","../../src/lib/Canvas.js","../../src/components/Cropper.js","components/Header.js","App.js","index.js"],"names":["readFile","file","Promise","reader","event","resolve","err","reject","useRefCallback","useState","ref","useCallback","node","setRef","CropPoint","size","color","pointSize","pointColor","onStop","externalOnDrag","onDrag","x","position","y","externalOnStop","bounds","defaultPosition","cropPoints","style","width","height","backgroundColor","borderRadius","zIndex","T","number","isRequired","pointArea","func","CropPoints","props","otherProps","previewDims","ratio","transform","dst","cv","bR","bL","tR","tL","sourceCoordinates","map","point","maxWidth","Math","maxHeight","destCoordinates","Ms","Md","transformMatrix","dsize","setPreviewPaneDimensions","applyFilter","a","options","blur","th","thMode","thMeanCorrection","thBlockSize","thMax","grayScale","filterCvParams","ksize","CropPointsDelimiters","lineWidth","lineColor","clearCanvas","canvas","ctx","sortPoints","sortOrder","drawShape","sortedPoints","index","nextPoint","useEffect","buildImgContainerStyle","Canvas","useOpenCv","loaded","canvasRef","useRef","useImperativeHandle","cropperRef","backToCrop","setMode","done","opts","setLoading","blob","image","mode","showPreview","newPreviewDims","window","calculated","calcDims","setPreviewDims","previewCanvas","imageResizeRatio","createCanvas","src","img","document","detectContours","contours","hierarchy","rect","Object","key","contourCoordinates","setCropPoints","onChange","loading","bootstrap","cvLoaded","cPs","onDragStop","pointerEvents","setPreviewCanvasRef","current","string","Cropper","openCvPath","Header","className","ghost","title","column","Item","label","href","alt","aria-label","role","margin","rel","target","Dragger","Upload","App","cropState","setCropState","setImg","s","doSomething","console","log","preview","ADAPTIVE_THRESH_GAUSSIAN_C","res","draggerProps","name","multiple","e","fileList","length","originFileObj","onClick","icon","CheckOutlined","undefined","PlusOutlined","ReactDOM","render","getElementById"],"mappings":"mbAAaA,EAAYC,YACvB,OAAIA,aAAJ,KACS,IAAIC,SAAQ,cACjB,IAAMC,EAAS,IAAf,WACAA,SAAiBC,YACfC,EAAQF,EAARE,SAEFF,UAAkBG,YAChBC,MAEFJ,sBAGJ,kBAAWF,EACFC,gBAAP,QADF,GCXF,SAASM,IAAiB,MACFC,qBADE,mBAClB,EADkB,KAClB,EADkB,KAMxB,MAAO,CAACC,EAJYC,uBAAaC,YAC/BC,OADF,KCAF,IASMC,EAAY,SAAC,GAQb,IAjBuBC,EAAMC,EAShB,EAQb,EARa,aAQb,EARa,YAQb,EARa,gBAQb,IAJJC,iBAII,MARa,GAQb,MAHJC,kBAGI,MARa,UAQb,EARa,EAQb,EAFJC,OACQC,EACJ,EADJC,OAEMA,EAASV,uBACb,cACES,EAAe,2BACb,GADY,IAGVE,EAAGC,IAAaN,EAFlB,EAGEO,EAAGD,IAAaN,EAAY,IAJhCG,KASF,CAXF,IAcMD,EAASR,uBACb,cACEc,EAAe,2BACb,GADY,IAGVH,EAAGC,IAAaN,EAFlB,EAGEO,EAAGD,IAAaN,EAAY,IAJlB,EAAdQ,KAUF,CAACL,EAZH,IAeA,OACE,uBACEM,OADF,SAEEC,gBAFF,EAGEJ,SAAU,CACRD,EAAGM,OAA0BX,EADrB,EAERO,EAAGI,OAA0BX,EAAY,GAE3CI,OAPF,EAQEF,OAAQA,GAER,yBAAKU,OA1DkBd,EA0DS,EA1DHC,EA0DE,EA1DS,CAC5Cc,MAD4C,EAE5CC,OAF4C,EAG5CC,gBAH4C,EAI5CC,aAJ4C,OAK5CV,SAL4C,WAM5CW,OAAQ,WA2DVpB,YAAsB,CACpBc,WAAY,UAAQ,CAClB,WAAY,UAAQ,CAAEN,EAAGa,IAAL,OAAeX,EAAGW,IAAEC,SADtB,WAElB,YAAa,UAAQ,CAAEd,EAAGa,IAAL,OAAeX,EAAGW,IAAEC,SAFvB,WAGlB,eAAgB,UAAQ,CAAEd,EAAGa,IAAL,OAAeX,EAAGW,IAAEC,SAH1B,WAIlB,cAAe,UAAQ,CAAEd,EAAGa,IAAL,OAAeX,EAAGW,IAAEC,SAAUC,aAEvDC,UAAWH,UAAQ,CAAC,WAAY,YAAa,eAPzB,gBAQpBR,gBAAiB,UAAQ,CACvBL,EAAGa,IADoB,OAEvBX,EAAGW,IAAEC,SAEPnB,UAAWkB,IAZS,OAapBjB,WAAYiB,IAbQ,OAcpBhB,OAAQgB,IAdY,KAepBd,OAAQc,IAAEI,MChFZ,IAAMC,EAAcC,YAAU,IACtB,EAAN,EAAM,YAAkBC,EADI,YAC5B,EAD4B,iBAE5B,OACE,kCACE,wEAEmB,CAAEpB,EAAF,EAAQE,EAAG,IAHhC,IAME,yEAEmB,CAAEF,EAAGqB,EAAL,MAAwBnB,EAAG,IARhD,IAWE,4EAEmB,CAAEF,EAAF,EAAQE,EAAGmB,EAAYZ,SAb5C,IAgBE,2EAEmB,CACfT,EAAGqB,EADY,MAEfnB,EAAGmB,EAAYZ,SArBvB,MA+BFS,YAAuB,CACrBG,YAAa,UAAQ,CACnBC,MAAOT,IADY,OAEnBL,MAAOK,IAFY,OAGnBJ,OAAQI,IAAEC,UCzCP,IAAMS,EAAY,SAAC,EAAD,SAMpB,QACGC,EAAMC,SAAZ,GAEMC,EAAKpB,EAAX,gBACMqB,EAAKrB,EAAX,eACMsB,EAAKtB,EAAX,aACMuB,EAAKvB,EAAX,YAGMwB,EAAoB,CAACD,EAAID,EAAIF,EAAIC,GAAII,KAAKC,YAAD,MAAW,CACxDA,IADwD,EAExDA,IAFF,MAMMC,EAAWC,SAASR,IAAOC,EAAhBO,EAAsBN,IAAOC,EAA7BK,GAAjB,EAEMC,EAAYD,SAASP,IAAOE,EAAhBK,EAAsBR,IAAOE,EAA7BM,GAAlB,EAGME,EAAkB,CACtB,CAAC,EADqB,GAEtB,CAACH,EAAD,EAFsB,GAGtB,CAACA,EAAD,EAAeE,EAHO,GAItB,CAAC,EAAGA,EAJN,IAQME,EAAKZ,mBAAsBA,EAAtBA,UAAmC,iCAA9C,KACMa,EAAKb,mBAAsBA,EAAtBA,UAAmC,qBAA9C,IACMc,EAAkBd,4BAAxB,GAEMe,EAAQ,IAAIf,EAAJ,OAAd,GAEAA,0BAKEA,EALFA,aAMEA,EANFA,gBAOE,IAAIA,EAPNA,QASAA,cAEAD,WACAa,WACAC,WACAC,WAEAE,KAGWC,EAAW,uCAAG,qCAAAC,EAAA,sDAEnBC,EAFmB,aAGvBC,MADc,EAEdC,IAFc,EAGdC,OAAQtB,EAHM,uBAIduB,iBAJc,GAKdC,YALc,GAMdC,MANc,IAOdC,WAPc,GAQXC,GAEC5B,EAAMC,SAAZ,GAEImB,EAAJ,WACEnB,eAAsBA,EAAtBA,mBAEEmB,EAAJ,OACQS,EAAQ,IAAI5B,EAAJ,OAAd,GACAA,yBAAuCA,EAAvCA,iBAEEmB,EAAJ,KACMA,EAAJ,UACEnB,wBAGEmB,EAHFnB,MAIEmB,EAJFnB,OAKEA,EALFA,cAMEmB,EANFnB,YAOEmB,EAPFnB,mBAUAD,uBACAC,wBAAiCA,EAAjCA,iBAGJA,cArCyB,2CAAH,0DCvDlB6B,EAAuB,SAAC,GAKxB,IALwB,EAKxB,EALwB,aAKxB,EALwB,YAKxB,IAFJC,iBAEI,MALwB,EAKxB,MADJC,iBACI,MADQ,UACR,IAC2BtE,IAD3B,mBACE,EADF,KACE,EADF,KAGEuE,EAAcpE,uBAAY,WAClBqE,aAAZ,MACAC,cAAoBtC,EAApBsC,MAAuCtC,EAAvCsC,UACC,CAACD,EAHJ,IAKME,EAAavE,uBAAY,WAE7B,MADkB,CAAC,WAAY,YAAa,eAA5C,eACOwE,QACL,0CAAmB,GAAnB,CAA4BvD,EADvBuD,OAAP,MAIC,CANH,IAQMC,EAAYzE,uBACf0E,YACC,IAAMJ,EAAMD,aAAZ,MACAC,cACAA,gBACAA,cACAI,WAAqB,cAInB,GAHA,IAAIC,GACFL,SAAW3B,EAAX2B,EAAoB3B,EAApB2B,GAEEK,IAAUD,SAAd,EAAuC,CACrC,IAAME,EAAYF,EAAaC,EAA/B,GACAL,SAAWM,EAAXN,EAAwBM,EAAxBN,QAEAA,iBAGJA,aAEF,CAnBF,IA8BA,OARAO,qBAAU,WACR,GAAI5D,GAAJ,EAA0B,CACxBmD,IACA,IAAMM,EAAeH,IACrBE,QAED,CAACxD,EANJ4D,IASE,4BACE9E,IADF,EAEEmB,MAAO,CACLN,SADK,WAELW,OAFK,EAGLJ,MAAOa,EAHF,MAILZ,OAAQY,EAAYZ,QAEtBD,MAAOa,EART,MASEZ,OAAQY,EAAYZ,UAO1B6C,YAAiC,CAC/BjC,YAAa,UAAQ,CACnBC,MAAOT,IADY,OAEnBL,MAAOK,IAFY,OAGnBJ,OAAQI,IAAEC,SAEZR,WAAY,UAAQ,CAClB,WAAY,UAAQ,CAAEN,EAAGa,IAAL,OAAeX,EAAGW,IAAEC,SADtB,WAElB,YAAa,UAAQ,CAAEd,EAAGa,IAAL,OAAeX,EAAGW,IAAEC,SAFvB,WAGlB,eAAgB,UAAQ,CAAEd,EAAGa,IAAL,OAAeX,EAAGW,IAAEC,SAH1B,WAIlB,cAAe,UAAQ,CAAEd,EAAGa,IAAL,OAAeX,EAAGW,IAAEC,SAAUC,aAEvDyC,UAAW3C,IAZoB,OAa/B0C,UAAW1C,IAAEC,QCrEf,IAMA,EANMqD,EAA0B9C,YAAD,MAAkB,CAC/Cb,MAAOa,EADwC,MAE/CZ,OAAQY,EAAYZ,SAMhB2D,EAAS,SAAC,GASV,IATU,EASV,EATU,QASV,EATU,aASV,EATU,WASV,EATU,aASV,EATU,YASV,EATU,YASV,EATU,WAQdZ,EACI,EADJA,UACI,EAC6Ba,cAA3B,EADF,EACIC,OAAkB7C,EADtB,EACsBA,GACpB8C,EAAYC,mBAFd,EAGyCtF,IAHzC,mBAGE,EAHF,KAGE,EAHF,OAIkCC,qBAJlC,mBAIE,EAJF,KAIE,EAJF,OAKgCA,qBALhC,mBAKE,EALF,KAKE,EALF,OAM0BA,oBAA9B,GANI,mBAME,EANF,KAME,EANF,OAOoBA,mBAAxB,QAPI,mBAOE,EAPF,KAOE,EAPF,KASJsF,8BAAoBC,GAAY,iBAAO,CACrCC,WAAY,WACVC,WAEFC,KAAM,WAAF,4BAAE,wCAAAlC,EAAA,6DAAOmC,EAAP,oDACG,IAAIlG,SAASG,YAClBgG,MACAxD,EAAU,EAERgD,EAFO,YAAThD,GAOAmB,EAAYjB,EAAI8C,EAAL,QAAwBO,EAAnCpC,gBACIoC,EAAJ,SACEF,aAEFL,kBAA0BS,YACxBjG,KACAgG,QACCE,EAHHV,UAdE,2CAAF,kDAAE,OAsBRL,qBAAU,WACR,YAAIgB,GACFC,MAED,CAJHjB,IAMA,IAAMzB,EAA2B,WAE/B,IAAM2C,EN1Dc,SAAC5E,EAAOC,GAC9B,IAAMa,EAAQd,EAAd,EAGMyB,EAAWoD,kBAAjB,GACMlD,EAAYkD,mBAAlB,IACMC,EAAa,CACjB9E,MADiB,EAEjBC,OAAQyB,WAAWD,EAFF,GAGjBX,MAAOA,GAOT,OAJIgE,SAAJ,IACEA,WACAA,QAAmBpD,WAAWC,EAA9BmD,IAEF,EM0CyBC,CACrBhB,UAD6B,MAE7BA,UAFF,QAIAiB,KAEAC,QAAsBL,EAAtBK,MACAA,SAAuBL,EAAvBK,OAEAC,EAAmBN,QAAuBb,UAA1CmB,OAGIC,EAAgBC,YACpB,OAAO,IAAIhH,SAAQ,cACjB,IAAMiH,EAAMC,uBAAZ,OACAD,+BAAa,sBAAAlD,EAAA,sDAEX4B,UAAoBuB,uBAApBvB,UACAA,gBAA0BsB,EAA1BtB,MACAA,iBAA2BsB,EAA3BtB,OACYA,qBAAZ,MACAZ,iBAGAlB,IACA1D,IAVW,2CAYb8G,YAIEV,EAAeF,YACnB,IAAMW,EAAMX,GAASxD,SAAU8C,EAA/B,SACM/C,EAAM,IAAIC,EAAhB,IACMe,EAAQ,IAAIf,EAAJ,OAAd,GACAA,mBAMEA,EANFA,YAQAA,cACAmE,WACApE,YAGIuE,EAAiB,WACrB,IAAMvE,EAAMC,SAAU8C,EAAtB,SACMlB,EAAQ,IAAI5B,EAAJ,OAAd,GAEAA,eAAsBA,EAAtBA,mBACAA,yBAAuCA,EAAvCA,gBACAA,oBAEAA,wBAAiCA,EAAjCA,eACA,IAAMuE,EAAW,IAAIvE,EAArB,UACMwE,EAAY,IAAIxE,EAAtB,IACAA,qBAIEA,EAJFA,WAKEA,EALFA,qBAOA,IAAMyE,EAAOzE,eAAb,GACAD,WACAyE,WACAD,WAEAG,wBAA2BC,YACzBF,KAAYA,KAAZA,KAGF,IAAMG,EAAqB,CACzB,WAAY,CAAErG,EAAGkG,EAAL,EAAahG,EAAGgG,EAAKhG,GACjC,YAAa,CAAEF,EAAGkG,IAASA,EAAd,MAA0BhG,EAAGgG,EAAKhG,GAC/C,eAAgB,CACdF,EAAGkG,IAASA,EADE,MAEdhG,EAAGgG,IAASA,EAAKzF,QAEnB,cAAe,CAAET,EAAGkG,EAAL,EAAahG,EAAGgG,IAASA,EAAKzF,SAG/C6F,MAGFpC,qBAAU,WACR,GACEqC,EAAS,8BAAD,IAAkBC,eAE3B,CAAClG,EAJJ4D,IAMAA,qBAAU,WASJe,SAAJ,SAA0CC,EAR3B,uCAAG,4BAAAvC,EAAA,sEACEjE,EAAlB,GADgB,cACVkH,EADU,gBAEVD,EAAN,GAFgB,OAGhBR,IACAY,IACAhB,MALgB,2CAAH,oDASb0B,GAEA1B,QAED,CAACE,EAAOQ,EAAeiB,EAd1BxC,IAgBA,IAAMnE,EAASV,uBAAY,cAAoB,IACvC,EAAN,EAAM,EAAKa,EAAX,EAAWA,EACXoG,GAAeK,YAAD,mBAAC,eAAS,GAAV,IAAoB,IAAQ,KAAKzG,YAFjD,IAKML,EAASR,uBAAY,gBAAgC,IACnD,EAAN,EAAM,EAAKa,EAAX,EAAWA,EACXoG,GAAeK,YAAD,mBAAC,eAAS,GAAV,IAAoB,IAAQ,KAAKzG,UAC/C,GACE0G,EAAW,8BAAD,IAAkB,IAAQ,KAAK1G,UAJ7C,IAQA,OACE,yBACEK,MAAK,aACHN,SADK,YAEDoB,GAAe8C,EAAnB,KAGD9C,YAAe6D,GAAf7D,GACC,qBACE1B,UADF,EAEEC,WAFF,EAGEU,WAHF,EAIEe,YAJF,EAKEtB,OALF,EAMEF,OAAQA,IAGXwB,YAAe6D,GAAf7D,GACC,qBACEA,YADF,EAEEf,WAFF,EAGEiD,UAHF,EAIEC,UAAWA,IAGf,4BACEjD,MAAO,CAAEK,OAAF,EAAaiG,cAAe,QACnCzH,IAAK0H,MAQb1C,YAAmB,CACjBa,MAAOpE,WADU,WAEjB+F,WAAY/F,IAFK,KAGjB0F,SAAU1F,IAHO,KAIjB6D,WAAY,UAAQ,CAClBqC,QAAS,UAAQ,CACflC,KAAMhE,SADS,WAEf8D,WAAY9D,SAAOE,eAGvBpB,UAAWkB,IAVM,OAWjB0C,UAAW1C,IAXM,OAYjBjB,WAAYiB,IAZK,OAajB2C,UAAW3C,IAAEmG,Q,ICnPFC,EAAU,gBAAiB,cACtC,OAAK9F,EAAL,MAKE,uBAAgB+F,WAAW,sBACzB,mDAA+B9H,MALjC,Q,4CC0DW+H,EA5DA,WACb,OACE,yBAAKC,UAAU,oBACb,kBAAC,IAAD,CAAYC,OAAO,EAAOC,MAAM,6BAC9B,kBAAC,IAAD,CAAc7H,KAAK,QAAQ8H,OAAQ,GACjC,kBAAC,IAAaC,KAAd,CAAmBC,MAAM,WACvB,uBAAGC,KAAK,2DACN,yBACEC,IAAI,MACJ/B,IAAI,gEAGR,uBAAG8B,KAAK,0BACN,yBACEC,IAAI,aACJ/B,IAAI,uEAIV,kBAAC,IAAa4B,KAAd,CAAmBC,MAAM,eACvB,kBAAC,IAAD,sJAKF,kBAAC,IAAaD,KAAd,CAAmBC,MAAM,cAAzB,wBAEE,0BACEG,aAAW,aACXC,KAAK,MACLtH,MAAO,CAAEuH,OAAQ,WAHnB,4BAFF,OASO,IACL,0BAAMF,aAAW,QAAQC,KAAK,MAAMtH,MAAO,CAAEuH,OAAQ,WAArD,iBAIF,kBAAC,IAAaN,KAAd,CAAmBC,MAAM,QACvB,kBAAC,IAAD,2CAEE,6BACA,2BACE,uBACEM,IAAI,aACJC,OAAO,SACPN,KAAK,0GAHP,gDCxCRO,EAAYC,IAAZD,QAqFOE,EAnFH,WAAO,IAAD,EACkBhJ,qBADlB,mBACTiJ,EADS,KACEC,EADF,OAEMlJ,qBAFN,mBAET0G,EAFS,KAEJyC,EAFI,KAGV5D,EAAaF,mBAEboC,EAAavH,uBAAY,SAACkJ,GAAD,OAAOF,EAAaE,KAAI,IACjDhC,EAAWlH,uBAAY,SAACkJ,GAAD,OAAOF,EAAaE,KAAI,IAE/CC,EAAW,uCAAG,4BAAA7F,EAAA,6DAClB8F,QAAQC,IAAI,YAAaN,GADP,kBAGE1D,EAAWqC,QAAQlC,KAAK,CACxC8D,SAAS,EACTvF,eAAgB,CACdJ,iBAAkB,GAClBD,OAAQsC,OAAO5D,GAAGmH,8BAPN,OAGVC,EAHU,OAUhBJ,QAAQC,IAAI,6BAA8BG,GAV1B,gDAYhBJ,QAAQC,IAAI,QAAZ,MAZgB,yDAAH,qDAuBXI,EAAe,CACnBC,KAAM,OACNC,UAAU,EACVzC,SAVkB,uCAAG,WAAO0C,GAAP,SAAAtG,EAAA,sDACjBsG,EAAEC,UAAYD,EAAEC,SAASC,OAAS,GAEpCb,EAAOW,EAAEC,SAAS,GAAGE,eAHF,2CAAH,uDAapB,OACE,yBAAKhC,UAAU,kBACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,qBACZgB,GACC,yBAAKhB,UAAU,qBACb,kBAAC,IAAD,CAAQiC,QAASb,EAAac,KAAM,kBAACC,EAAA,EAAD,OAApC,QAGA,kBAAC,IAAD,CACEF,QAAS,WACP3E,EAAWqC,QAAQpC,eAFvB,QAOA,kBAAC,IAAD,CACE0E,QAAS,WACPf,OAAOkB,GACPnB,MAHJ,UAUJ,kBAACpB,EAAD,CACE7H,IAAKsF,EACLO,MAAOY,EACPU,SAAUA,EACVK,WAAYA,KAEJ,OAATwB,QAAS,IAATA,OAAA,EAAAA,EAAW5B,UAAW,kBAAC,IAAD,OACrBX,GACA,kBAACoC,EAAYa,EACX,2BACE,kBAACW,EAAA,EAAD,OAEF,yCC/EZC,IAASC,OAAO,kBAAC,EAAD,MAAS7D,SAAS8D,eAAe,W","file":"static/js/main.4399336c.chunk.js","sourcesContent":["export const readFile = (file) => {\n  if (file instanceof File) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader()\n      reader.onload = (event) => {\n        resolve(reader.result)\n      }\n      reader.onerror = (err) => {\n        reject(err)\n      }\n      reader.readAsDataURL(file)\n    })\n  }\n  if (typeof file === 'string') {\n    return Promise.resolve(file)\n  }\n}\n\nexport const calcDims = (width, height) => {\n  const ratio = width / height\n\n  // TODO parametrize this\n  const maxWidth = window.innerWidth - 40\n  const maxHeight = window.innerHeight - 240\n  const calculated = {\n    width: maxWidth,\n    height: Math.round(maxWidth / ratio),\n    ratio: ratio\n  }\n\n  if (calculated.height > maxHeight) {\n    calculated.height = maxHeight\n    calculated.width = Math.round(maxHeight * ratio)\n  }\n  return calculated\n}\n","import { useCallback, useState } from 'react'\n\nfunction useRefCallback() {\n  const [ref, setRef] = useState()\n  const refCallback = useCallback((node) => {\n    setRef(node)\n  }, [])\n\n  return [ref, refCallback]\n}\n\nexport default useRefCallback\n","import React, { useCallback } from 'react'\nimport Draggable from 'react-draggable'\nimport T from 'prop-types'\n\nconst buildCropPointStyle = (size, color) => ({\n  width: size,\n  height: size,\n  backgroundColor: color,\n  borderRadius: '100%',\n  position: 'absolute',\n  zIndex: 1001\n})\n\nconst CropPoint = ({\n  cropPoints,\n  pointArea,\n  defaultPosition,\n  pointSize = 20,\n  pointColor = '#3cabe2',\n  onStop: externalOnStop,\n  onDrag: externalOnDrag\n}) => {\n  const onDrag = useCallback(\n    (_, position) => {\n      externalOnDrag(\n        {\n          ...position,\n          x: position.x + pointSize / 2,\n          y: position.y + pointSize / 2\n        },\n        pointArea\n      )\n    },\n    [externalOnDrag]\n  )\n\n  const onStop = useCallback(\n    (_, position) => {\n      externalOnStop(\n        {\n          ...position,\n          x: position.x + pointSize / 2,\n          y: position.y + pointSize / 2\n        },\n        pointArea,\n        cropPoints\n      )\n    },\n    [externalOnDrag, cropPoints]\n  )\n\n  return (\n    <Draggable\n      bounds='parent'\n      defaultPosition={defaultPosition}\n      position={{\n        x: cropPoints[pointArea].x - pointSize / 2,\n        y: cropPoints[pointArea].y - pointSize / 2\n      }}\n      onDrag={onDrag}\n      onStop={onStop}\n    >\n      <div style={buildCropPointStyle(pointSize, pointColor)} />\n    </Draggable>\n  )\n}\n\nexport default CropPoint\n\nCropPoint.propTypes = {\n  cropPoints: T.shape({\n    'left-top': T.shape({ x: T.number, y: T.number }).isRequired,\n    'right-top': T.shape({ x: T.number, y: T.number }).isRequired,\n    'right-bottom': T.shape({ x: T.number, y: T.number }).isRequired,\n    'left-bottom': T.shape({ x: T.number, y: T.number }).isRequired\n  }),\n  pointArea: T.oneOf(['left-top', 'right-top', 'right-bottom', 'left-bottom']),\n  defaultPosition: T.shape({\n    x: T.number,\n    y: T.number\n  }),\n  pointSize: T.number,\n  pointColor: T.string,\n  onStop: T.func,\n  onDrag: T.func\n}\n","import React, { Fragment } from 'react'\nimport CropPoint from './CropPoint'\nimport T from 'prop-types'\n\nconst CropPoints = (props) => {\n  const { previewDims, ...otherProps } = props\n  return (\n    <>\n      <CropPoint\n        pointArea='left-top'\n        defaultPosition={{ x: 0, y: 0 }}\n        {...otherProps}\n      />\n      <CropPoint\n        pointArea='right-top'\n        defaultPosition={{ x: previewDims.width, y: 0 }}\n        {...otherProps}\n      />\n      <CropPoint\n        pointArea='right-bottom'\n        defaultPosition={{ x: 0, y: previewDims.height }}\n        {...otherProps}\n      />\n      <CropPoint\n        pointArea='left-bottom'\n        defaultPosition={{\n          x: previewDims.width,\n          y: previewDims.height\n        }}\n        {...otherProps}\n      />\n    </>\n  )\n}\n\nexport default CropPoints\n\nCropPoints.propTypes = {\n  previewDims: T.shape({\n    ratio: T.number,\n    width: T.number,\n    height: T.number\n  })\n}\n","export const transform = (\n  cv,\n  docCanvas,\n  cropPoints,\n  imageResizeRatio,\n  setPreviewPaneDimensions\n) => {\n  const dst = cv.imread(docCanvas)\n\n  const bR = cropPoints['right-bottom']\n  const bL = cropPoints['left-bottom']\n  const tR = cropPoints['right-top']\n  const tL = cropPoints['left-top']\n\n  // create source coordinates matrix\n  const sourceCoordinates = [tL, tR, bR, bL].map((point) => [\n    point.x / imageResizeRatio,\n    point.y / imageResizeRatio\n  ])\n\n  // get max width\n  const maxWidth = Math.max(bR.x - bL.x, tR.x - tL.x) / imageResizeRatio\n  // get max height\n  const maxHeight = Math.max(bL.y - tL.y, bR.y - tR.y) / imageResizeRatio\n\n  // create dest coordinates matrix\n  const destCoordinates = [\n    [0, 0],\n    [maxWidth - 1, 0],\n    [maxWidth - 1, maxHeight - 1],\n    [0, maxHeight - 1]\n  ]\n\n  // convert to open cv matrix objects\n  const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...sourceCoordinates))\n  const Md = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...destCoordinates))\n  const transformMatrix = cv.getPerspectiveTransform(Ms, Md)\n  // set new image size\n  const dsize = new cv.Size(maxWidth, maxHeight)\n  // perform warp\n  cv.warpPerspective(\n    dst,\n    dst,\n    transformMatrix,\n    dsize,\n    cv.INTER_LINEAR,\n    cv.BORDER_CONSTANT,\n    new cv.Scalar()\n  )\n  cv.imshow(docCanvas, dst)\n\n  dst.delete()\n  Ms.delete()\n  Md.delete()\n  transformMatrix.delete()\n\n  setPreviewPaneDimensions()\n}\n\nexport const applyFilter = async (cv, docCanvas, filterCvParams) => {\n  // default options\n  const options = {\n    blur: false,\n    th: true,\n    thMode: cv.ADAPTIVE_THRESH_MEAN_C,\n    thMeanCorrection: 15,\n    thBlockSize: 25,\n    thMax: 255,\n    grayScale: true,\n    ...filterCvParams\n  }\n  const dst = cv.imread(docCanvas)\n\n  if (options.grayScale) {\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0)\n  }\n  if (options.blur) {\n    const ksize = new cv.Size(5, 5)\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT)\n  }\n  if (options.th) {\n    if (options.grayScale) {\n      cv.adaptiveThreshold(\n        dst,\n        dst,\n        options.thMax,\n        options.thMode,\n        cv.THRESH_BINARY,\n        options.thBlockSize,\n        options.thMeanCorrection\n      )\n    } else {\n      dst.convertTo(dst, -1, 1, 60)\n      cv.threshold(dst, dst, 170, 255, cv.THRESH_BINARY)\n    }\n  }\n  cv.imshow(docCanvas, dst)\n}\n","import React, { useCallback, useEffect } from 'react'\nimport useRefCallback from '../hooks/useRefCallback'\nimport T from 'prop-types'\n\nconst CropPointsDelimiters = ({\n  cropPoints,\n  previewDims,\n  lineWidth = 3,\n  lineColor = '#3cabe2'\n}) => {\n  const [canvas, setCanvasRef] = useRefCallback()\n\n  const clearCanvas = useCallback(() => {\n    const ctx = canvas.getContext('2d')\n    ctx.clearRect(0, 0, previewDims.width, previewDims.height)\n  }, [canvas, previewDims])\n\n  const sortPoints = useCallback(() => {\n    const sortOrder = ['left-top', 'right-top', 'right-bottom', 'left-bottom']\n    return sortOrder.reduce(\n      (acc, pointPos) => [...acc, cropPoints[pointPos]],\n      []\n    )\n  }, [cropPoints])\n\n  const drawShape = useCallback(\n    (sortedPoints) => {\n      const ctx = canvas.getContext('2d')\n      ctx.lineWidth = lineWidth\n      ctx.strokeStyle = lineColor\n      ctx.beginPath()\n      sortedPoints.forEach((point, index) => {\n        if (index === 0) {\n          ctx.moveTo(point.x, point.y)\n        }\n        if (index !== sortedPoints.length - 1) {\n          const nextPoint = sortedPoints[index + 1]\n          ctx.lineTo(nextPoint.x, nextPoint.y)\n        } else {\n          ctx.closePath()\n        }\n      })\n      ctx.stroke()\n    },\n    [canvas]\n  )\n\n  useEffect(() => {\n    if (cropPoints && canvas) {\n      clearCanvas()\n      const sortedPoints = sortPoints()\n      drawShape(sortedPoints)\n    }\n  }, [cropPoints, canvas])\n\n  return (\n    <canvas\n      ref={setCanvasRef}\n      style={{\n        position: 'absolute',\n        zIndex: 5,\n        width: previewDims.width,\n        height: previewDims.height\n      }}\n      width={previewDims.width}\n      height={previewDims.height}\n    />\n  )\n}\n\nexport default CropPointsDelimiters\n\nCropPointsDelimiters.propTypes = {\n  previewDims: T.shape({\n    ratio: T.number,\n    width: T.number,\n    height: T.number\n  }),\n  cropPoints: T.shape({\n    'left-top': T.shape({ x: T.number, y: T.number }).isRequired,\n    'right-top': T.shape({ x: T.number, y: T.number }).isRequired,\n    'right-bottom': T.shape({ x: T.number, y: T.number }).isRequired,\n    'left-bottom': T.shape({ x: T.number, y: T.number }).isRequired\n  }),\n  lineColor: T.string,\n  lineWidth: T.number\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState\n} from 'react'\nimport { useOpenCv } from 'opencv-react'\nimport T from 'prop-types'\n\nimport { calcDims, readFile } from '../lib/utils'\nimport useRefCallback from '../hooks/useRefCallback'\nimport CropPoints from '../lib/CropPoints'\nimport { applyFilter, transform } from '../lib/imgManipulation'\nimport CropPointsDelimiters from './CropPointsDelimiters'\n\nconst buildImgContainerStyle = (previewDims) => ({\n  width: previewDims.width,\n  height: previewDims.height\n})\n\nconst imageDimensions = { width: 0, height: 0 }\nlet imageResizeRatio\n\nconst Canvas = ({\n  image,\n  onDragStop,\n  onChange,\n  cropperRef,\n  pointSize,\n  lineWidth,\n  pointColor,\n  lineColor\n}) => {\n  const { loaded: cvLoaded, cv } = useOpenCv()\n  const canvasRef = useRef()\n  const [previewCanvas, setPreviewCanvasRef] = useRefCallback()\n  const [previewDims, setPreviewDims] = useState()\n  const [cropPoints, setCropPoints] = useState()\n  const [loading, setLoading] = useState(false)\n  const [mode, setMode] = useState('crop')\n\n  useImperativeHandle(cropperRef, () => ({\n    backToCrop: () => {\n      setMode('crop')\n    },\n    done: async (opts = {}) => {\n      return new Promise((resolve) => {\n        setLoading(true)\n        transform(\n          cv,\n          canvasRef.current,\n          cropPoints,\n          imageResizeRatio,\n          setPreviewPaneDimensions\n        )\n        applyFilter(cv, canvasRef.current, opts.filterCvParams)\n        if (opts.preview) {\n          setMode('preview')\n        }\n        canvasRef.current.toBlob((blob) => {\n          resolve(blob)\n          setLoading(false)\n        }, image.type)\n      })\n    }\n  }))\n\n  useEffect(() => {\n    if (mode === 'preview') {\n      showPreview()\n    }\n  }, [mode])\n\n  const setPreviewPaneDimensions = () => {\n    // set preview pane dimensions\n    const newPreviewDims = calcDims(\n      canvasRef.current.width,\n      canvasRef.current.height\n    )\n    setPreviewDims(newPreviewDims)\n\n    previewCanvas.width = newPreviewDims.width\n    previewCanvas.height = newPreviewDims.height\n\n    imageResizeRatio = newPreviewDims.width / canvasRef.current.width\n  }\n\n  const createCanvas = (src) => {\n    return new Promise((resolve, reject) => {\n      const img = document.createElement('img')\n      img.onload = async () => {\n        // set edited image canvas and dimensions\n        canvasRef.current = document.createElement('canvas')\n        canvasRef.current.width = img.width\n        canvasRef.current.height = img.height\n        const ctx = canvasRef.current.getContext('2d')\n        ctx.drawImage(img, 0, 0)\n        imageDimensions.width = canvasRef.current.width\n        imageDimensions.height = canvasRef.current.height\n        setPreviewPaneDimensions()\n        resolve()\n      }\n      img.src = src\n    })\n  }\n\n  const showPreview = (image) => {\n    const src = image || cv.imread(canvasRef.current)\n    const dst = new cv.Mat()\n    const dsize = new cv.Size(0, 0)\n    cv.resize(\n      src,\n      dst,\n      dsize,\n      imageResizeRatio,\n      imageResizeRatio,\n      cv.INTER_AREA\n    )\n    cv.imshow(previewCanvas, dst)\n    src.delete()\n    dst.delete()\n  }\n\n  const detectContours = () => {\n    const dst = cv.imread(canvasRef.current)\n    const ksize = new cv.Size(5, 5)\n    // convert the image to grayscale, blur it, and find edges in the image\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0)\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT)\n    cv.Canny(dst, dst, 75, 200)\n    // find contours\n    cv.threshold(dst, dst, 120, 200, cv.THRESH_BINARY)\n    const contours = new cv.MatVector()\n    const hierarchy = new cv.Mat()\n    cv.findContours(\n      dst,\n      contours,\n      hierarchy,\n      cv.RETR_CCOMP,\n      cv.CHAIN_APPROX_SIMPLE\n    )\n    const rect = cv.boundingRect(dst)\n    dst.delete()\n    hierarchy.delete()\n    contours.delete()\n    // transform the rectangle into a set of points\n    Object.keys(rect).forEach((key) => {\n      rect[key] = rect[key] * imageResizeRatio\n    })\n\n    const contourCoordinates = {\n      'left-top': { x: rect.x, y: rect.y },\n      'right-top': { x: rect.x + rect.width, y: rect.y },\n      'right-bottom': {\n        x: rect.x + rect.width,\n        y: rect.y + rect.height\n      },\n      'left-bottom': { x: rect.x, y: rect.y + rect.height }\n    }\n\n    setCropPoints(contourCoordinates)\n  }\n\n  useEffect(() => {\n    if (onChange) {\n      onChange({ ...cropPoints, loading })\n    }\n  }, [cropPoints, loading])\n\n  useEffect(() => {\n    const bootstrap = async () => {\n      const src = await readFile(image)\n      await createCanvas(src)\n      showPreview()\n      detectContours()\n      setLoading(false)\n    }\n\n    if (image && previewCanvas && cvLoaded && mode === 'crop') {\n      bootstrap()\n    } else {\n      setLoading(true)\n    }\n  }, [image, previewCanvas, cvLoaded, mode])\n\n  const onDrag = useCallback((position, area) => {\n    const { x, y } = position\n    setCropPoints((cPs) => ({ ...cPs, [area]: { x, y } }))\n  }, [])\n\n  const onStop = useCallback((position, area, cropPoints) => {\n    const { x, y } = position\n    setCropPoints((cPs) => ({ ...cPs, [area]: { x, y } }))\n    if (onDragStop) {\n      onDragStop({ ...cropPoints, [area]: { x, y } })\n    }\n  }, [])\n\n  return (\n    <div\n      style={{\n        position: 'relative',\n        ...(previewDims && buildImgContainerStyle(previewDims))\n      }}\n    >\n      {previewDims && mode === 'crop' && cropPoints && (\n        <CropPoints\n          pointSize={pointSize}\n          pointColor={pointColor}\n          cropPoints={cropPoints}\n          previewDims={previewDims}\n          onDrag={onDrag}\n          onStop={onStop}\n        />\n      )}\n      {previewDims && mode === 'crop' && cropPoints && (\n        <CropPointsDelimiters\n          previewDims={previewDims}\n          cropPoints={cropPoints}\n          lineWidth={lineWidth}\n          lineColor={lineColor}\n        />\n      )}\n      <canvas\n        style={{ zIndex: 5, pointerEvents: 'none' }}\n        ref={setPreviewCanvasRef}\n      />\n    </div>\n  )\n}\n\nexport default Canvas\n\nCanvas.propTypes = {\n  image: T.object.isRequired,\n  onDragStop: T.func,\n  onChange: T.func,\n  cropperRef: T.shape({\n    current: T.shape({\n      done: T.func.isRequired,\n      backToCrop: T.func.isRequired\n    })\n  }),\n  pointSize: T.number,\n  lineWidth: T.number,\n  pointColor: T.string,\n  lineColor: T.string\n}\n","import React from 'react'\nimport { OpenCvProvider } from 'opencv-react'\nimport Canvas from '../lib/Canvas'\n\nexport const Cropper = React.forwardRef((props, ref) => {\n  if (!props.image) {\n    return null\n  }\n\n  return (\n    <OpenCvProvider openCvPath='./opencv/opencv.js'>\n      <Canvas {...props} cropperRef={ref} />\n    </OpenCvProvider>\n  )\n})\n","import { Button, Descriptions, PageHeader } from 'antd'\nimport Paragraph from 'antd/lib/typography/Paragraph'\nimport React from 'react'\n\nconst Header = () => {\n  return (\n    <div className='site-page-header'>\n      <PageHeader ghost={false} title='react-perspective-cropper'>\n        <Descriptions size='small' column={2}>\n          <Descriptions.Item label='Package'>\n            <a href='https://www.npmjs.com/package/react-perspective-cropper'>\n              <img\n                alt='npm'\n                src='https://img.shields.io/npm/v/react-perspective-cropper.svg'\n              />\n            </a>\n            <a href='https://standardjs.com'>\n              <img\n                alt='standardjs'\n                src='https://img.shields.io/badge/code_style-standard-brightgreen.svg'\n              />\n            </a>\n          </Descriptions.Item>\n          <Descriptions.Item label='Description'>\n            <Paragraph>\n              React component performing border detection, perspective\n              correction and simple image filters over a provided image 📲 📸\n            </Paragraph>\n          </Descriptions.Item>\n          <Descriptions.Item label='Created by'>\n            Giacomo Cerquone from\n            <span\n              aria-label='italy flag'\n              role='img'\n              style={{ margin: '0 10px' }}\n            >\n              🇮🇹\n            </span>\n            with{' '}\n            <span aria-label='heart' role='img' style={{ margin: '0 10px' }}>\n              ❤️\n            </span>\n          </Descriptions.Item>\n          <Descriptions.Item label='Info'>\n            <Paragraph>\n              Make sure to only use HiRes images!\n              <br />\n              <b>\n                <a\n                  rel='noreferrer'\n                  target='_blank'\n                  href='https://github.com/giacomocerquone/react-perspective-cropper/blob/master/gifs/example-img.jpg?raw=true'\n                >\n                  You could use this image for example.\n                </a>\n              </b>\n            </Paragraph>\n          </Descriptions.Item>\n        </Descriptions>\n      </PageHeader>\n    </div>\n  )\n}\n\nexport default Header\n","import React, { useCallback, useRef, useState } from 'react'\nimport { Button, Spin, Upload } from 'antd'\nimport { CheckOutlined, PlusOutlined } from '@ant-design/icons'\nimport { Cropper } from 'react-perspective-cropper'\n\nimport './App.css'\nimport Header from './components/Header'\n\nconst { Dragger } = Upload\n\nconst App = () => {\n  const [cropState, setCropState] = useState()\n  const [img, setImg] = useState()\n  const cropperRef = useRef()\n\n  const onDragStop = useCallback((s) => setCropState(s), [])\n  const onChange = useCallback((s) => setCropState(s), [])\n\n  const doSomething = async () => {\n    console.log('CropState', cropState)\n    try {\n      const res = await cropperRef.current.done({\n        preview: true,\n        filterCvParams: {\n          thMeanCorrection: 13,\n          thMode: window.cv.ADAPTIVE_THRESH_GAUSSIAN_C\n        }\n      })\n      console.log('Cropped and filtered image', res)\n    } catch (e) {\n      console.log('error', e)\n    }\n  }\n\n  const onImgSelection = async (e) => {\n    if (e.fileList && e.fileList.length > 0) {\n      // it can also be a http or base64 string for example\n      setImg(e.fileList[0].originFileObj)\n    }\n  }\n\n  const draggerProps = {\n    name: 'file',\n    multiple: false,\n    onChange: onImgSelection\n  }\n\n  return (\n    <div className='root-container'>\n      <Header />\n      <div className='content-container'>\n        {cropState && (\n          <div className='buttons-container'>\n            <Button onClick={doSomething} icon={<CheckOutlined />}>\n              Done\n            </Button>\n            <Button\n              onClick={() => {\n                cropperRef.current.backToCrop()\n              }}\n            >\n              Back\n            </Button>\n            <Button\n              onClick={() => {\n                setImg(undefined)\n                setCropState()\n              }}\n            >\n              Reset\n            </Button>\n          </div>\n        )}\n        <Cropper\n          ref={cropperRef}\n          image={img}\n          onChange={onChange}\n          onDragStop={onDragStop}\n        />\n        {cropState?.loading && <Spin />}\n        {!img && (\n          <Dragger {...draggerProps}>\n            <p>\n              <PlusOutlined />\n            </p>\n            <p>Upload</p>\n          </Dragger>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}